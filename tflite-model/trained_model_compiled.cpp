/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 18.02.2021 11:52:41

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 10624;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1287 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[8] = { -0.88684594631195068, 0.14333032071590424, -1.1291437149047852, -1.0962806940078735, -1.5350580215454102, -1.4814735651016235, -0.86316370964050293, 0.090754002332687378, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[16] = { -0.7418898344039917, 0.27505284547805786, -0.92957031726837158, -0.15838147699832916, 0.84341692924499512, -0.34869849681854248, -0.6196708083152771, 0.12400730699300766, -2.2921419143676758, 0.26641425490379333, -0.085429541766643524, -0.35935944318771362, -0.43286558985710144, 0.27366694808006287, 0.97227591276168823, -0.43169161677360535, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(8) float tensor_data4[3] = { 1.8644273281097412, -0.61657047271728516, -1.0019446611404419, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const ALIGN(8) float tensor_data5[3*400] = { 
  -0.16057589650154114, 0.13752718269824982, 0.67167127132415771, -0.18037441372871399, 0.10495583713054657, -0.13963331282138824, 0.13454987108707428, 0.36555635929107666, -0.20021499693393707, -0.34056770801544189, 0.14967375993728638, 0.087097913026809692, -0.086036838591098785, -0.047629963606595993, 0.77326536178588867, 0.095256581902503967, 0.058987565338611603, 0.0069290059618651867, 0.39608252048492432, -0.1327425092458725, -0.35357922315597534, 0.013292352668941021, -0.34953576326370239, 0.056261640042066574, 0.3810192346572876, -0.38896137475967407, 0.11384113878011703, 0.15082620084285736, 0.25814998149871826, -0.23886767029762268, -0.062798894941806793, 0.12074317038059235, 0.31845423579216003, -0.076069489121437073, 0.70139855146408081, -0.37032234668731689, -0.23570738732814789, -0.26231011748313904, 0.0428006611764431, 0.14089471101760864, 0.40254369378089905, -0.026467997580766678, 0.053048446774482727, 0.24853187799453735, -0.14240792393684387, -0.63130879402160645, 0.15559020638465881, 0.22930359840393066, 0.18922455608844757, -0.83823537826538086, 0.35655021667480469, -0.10545316338539124, -0.26666218042373657, -0.052401803433895111, -0.39016145467758179, 0.083944708108901978, 0.28452858328819275, -0.22149108350276947, -0.065505653619766235, 0.1370079517364502, -0.24673150479793549, -0.92937469482421875, 0.15029561519622803, 0.066321894526481628, 0.033175177872180939, -0.82703876495361328, 0.44651302695274353, -0.1509021669626236, -0.21014401316642761, -0.12990745902061462, -0.52817541360855103, 0.31999179720878601, -0.020332228392362595, -0.4742148220539093, 0.13526064157485962, 0.067933350801467896, 0.13319242000579834, -0.82616198062896729, 0.088728517293930054, 0.25601837038993835, 0.14056612551212311, -0.55592232942581177, 0.49951750040054321, -0.41298851370811462, -0.24730996787548065, -0.26415112614631653, -0.40656894445419312, 0.29796653985977173, 0.11404485255479813, 1.9404105842113495e-06, 0.26913413405418396, 0.34341159462928772, 0.051280144602060318, -0.55510133504867554, 0.12745137512683868, 0.19496475160121918, -0.079460017383098602, -0.5094296932220459, 0.12847383320331573, -0.11941465735435486, -0.12357950210571289, -0.44099947810173035, -0.29471302032470703, 0.14496487379074097, 0.47742724418640137, -0.22387230396270752, 0.15512558817863464, 0.25565004348754883, 0.052299346774816513, -0.34862208366394043, 0.073565810918807983, 0.23055541515350342, 0.16571862995624542, -0.57875502109527588, -0.29273360967636108, 0.060904484242200851, -0.18537701666355133, -0.14017638564109802, -0.052501071244478226, 0.1683754026889801, 0.16684256494045258, -0.19070900976657867, 0.29020550847053528, 0.14911939203739166, -0.28350985050201416, -0.30263027548789978, 0.40545141696929932, 0.10801504552364349, 0.14391770958900452, -0.98435914516448975, -0.074864484369754791, -0.17584051191806793, -0.18869084119796753, 0.059424977749586105, -0.21970140933990479, 0.22365319728851318, 0.16193528473377228, -0.68190181255340576, 0.40561303496360779, 0.20755976438522339, -0.19066998362541199, -0.61359584331512451, 0.047630548477172852, 0.15192095935344696, 0.12150666862726212, -0.41362196207046509, 0.33370786905288696, -0.12058443576097488, -0.11559989303350449, -0.15500079095363617, -0.13419283926486969, 0.083883598446846008, 0.2764880359172821, -0.31993019580841064, 0.21546004712581635, 0.43322306871414185, -0.30691581964492798, -0.69298124313354492, 0.058407668024301529, 0.19654567539691925, -0.011590783484280109, -0.33122602105140686, 0.23110783100128174, 0.03875071182847023, -0.28140521049499512, -0.35668668150901794, -0.64077544212341309, -0.061175264418125153, 0.48657131195068359, -0.72910958528518677, 0.15111914277076721, 0.22461016476154327, -0.095539577305316925, -0.51428908109664917, 0.055069673806428909, 0.21323515474796295, 0.13490927219390869, -0.63118261098861694, -0.26050221920013428, -0.13393703103065491, -0.0027450700290501118, -0.080423496663570404, -0.21623332798480988, 0.12415872514247894, 0.17829287052154541, -0.12219519168138504, 0.38531160354614258, 0.13018429279327393, -0.21826481819152832, -0.25564762949943542, -0.30034884810447693, 0.27703183889389038, 0.01185373030602932, -0.61043661832809448, -0.14567717909812927, -0.34428173303604126, -0.15070551633834839, -0.29314658045768738, 0.043239142745733261, 0.0045971078798174858, -0.047605827450752258, -0.13704517483711243, 0.32873651385307312, 0.19274789094924927, -0.20852164924144745, -0.67317384481430054, 0.23559141159057617, 0.12548613548278809, 0.069726847112178802, -0.10984870791435242, 0.027834536507725716, -0.11765009164810181, -0.13218657672405243, -0.24772621691226959, -0.34284484386444092, -0.056988392025232315, 0.25814193487167358, -0.34912964701652527, 0.3421822190284729, 0.15811201930046082, -0.13477569818496704, -0.23672279715538025, -0.070596441626548767, 0.087935395538806915, -0.0073650781996548176, -0.23243170976638794, -0.032485093921422958, -0.38697052001953125, -0.17658905684947968, -0.12088630348443985, -0.48428064584732056, 0.042336005717515945, 0.096234574913978577, -0.34110403060913086, 0.12019111216068268, 0.036822501569986343, -0.23097240924835205, -0.18801286816596985, -0.10489347577095032, 0.12650506198406219, 0.17701956629753113, -0.43436864018440247, -0.30441316962242126, 0.17705737054347992, -0.057935751974582672, -0.33769389986991882, -0.33843261003494263, -0.055964689701795578, -0.19002321362495422, -0.36364737153053284, 0.2566618025302887, 0.0070863934233784676, -0.12859788537025452, -0.34904858469963074, -0.038350902497768402, 0.20751352608203888, 0.19172431528568268, 0.032487697899341583, 0.20577907562255859, -0.33210593461990356, -0.023707440122961998, -0.050442177802324295, -0.51216840744018555, -0.27492514252662659, 0.1795727014541626, -0.51970195770263672, 0.17848140001296997, 0.066354051232337952, -0.046171315014362335, -0.69332563877105713, -0.17944373190402985, 0.23348091542720795, 0.31116816401481628, -0.16994881629943848, -0.12833103537559509, -0.35630041360855103, -0.089081898331642151, -0.3882746696472168, -0.79216647148132324, -0.28556084632873535, 0.1900457888841629, -0.50914686918258667, 0.41119486093521118, -0.16868047416210175, -0.18103046715259552, -0.23400066792964935, -0.12457619607448578, 0.20317377150058746, 0.29388710856437683, -0.35718822479248047, -0.062382422387599945, -0.42216148972511292, -0.096518881618976593, -0.61295461654663086, 0.053193472325801849, -0.46938073635101318, 0.034855492413043976, 0.073222659528255463, 0.23446561396121979, 0.031084051355719566, 0.096955940127372742, -0.38941347599029541, -0.31683376431465149, 0.095743633806705475, 0.34916165471076965, -0.5329938530921936, -0.31218352913856506, -0.049240395426750183, -0.025266850367188454, -0.35478895902633667, -0.29931750893592834, -0.025851670652627945, 0.36103084683418274, -0.39142462611198425, 0.27829864621162415, -0.16066437959671021, -0.28570657968521118, -0.54145848751068115, -0.31023129820823669, 0.080085210502147675, 0.35501304268836975, -0.43524327874183655, 0.0011609392240643501, 0.14170338213443756, -0.23062440752983093, -0.38242983818054199, -0.3612925112247467, -0.066199429333209991, -0.074595063924789429, -0.60727220773696899, 0.15970571339130402, 0.078992672264575958, 0.035484571009874344, -0.29698514938354492, -0.33246782422065735, 0.16226665675640106, 0.34082430601119995, -0.36936956644058228, -0.38351944088935852, 0.034759331494569778, -0.082527957856655121, -0.40932181477546692, -0.87087661027908325, -0.057077597826719284, -0.10168023407459259, -0.31986820697784424, 0.15486092865467072, 0.11528271436691284, -0.0039318944327533245, -0.19668534398078918, -0.16116602718830109, 0.20799504220485687, 0.19552022218704224, 0.04783586785197258, 0.27842703461647034, -0.027166362851858139, -0.263692706823349, 0.021403346210718155, -0.64332658052444458, -0.14156809449195862, 0.083907335996627808, -0.13251753151416779, 0.31099694967269897, 0.10483445972204208, -0.14334794878959656, 0.030368689447641373, -0.29468646645545959, 0.13207097351551056, 0.30572977662086487, 0.19742906093597412, 0.28152209520339966, 0.10572400689125061, -0.24706706404685974, -0.19162382185459137, 0.15588648617267609, 0.082617402076721191, 0.016178768128156662, -0.35099726915359497, 0.17996218800544739, -0.0058840382844209671, -0.023471739143133163, -0.18275497853755951, -0.27706438302993774, 0.25184524059295654, 0.21003350615501404, 0.082124516367912292, 0.22982639074325562, 0.089756593108177185, -0.1908547580242157, -0.40369048714637756, 0.3507530689239502, 0.26202508807182312, -0.17586448788642883, -0.16633294522762299, 0.14185859262943268, 0.10807565599679947, -0.17644605040550232, 0.15314857661724091, -0.024875050410628319, 0.039737608283758163, 
  0.03696165606379509, 1.1178692579269409, -0.54077941179275513, 0.035899493843317032, 0.052469789981842041, -0.32331976294517517, -0.73569494485855103, -0.53953540325164795, 0.15958523750305176, 0.0046089277602732182, -0.63042491674423218, -0.087849371135234833, 0.09368550032377243, -0.24437615275382996, -1.078137993812561, -0.27326154708862305, -0.21412079036235809, 0.22913101315498352, -1.0556259155273438, 0.48666849732398987, 0.095421656966209412, -1.1574474573135376, -0.27256283164024353, -0.94726604223251343, -0.1401752382516861, -0.19108271598815918, -0.12299885600805283, -0.33297830820083618, 0.2383531779050827, -0.063043780624866486, -0.20195960998535156, -0.54736995697021484, -0.47727259993553162, 0.67008739709854126, -1.6466408967971802, 0.41069376468658447, 0.13607607781887054, -0.3215067982673645, 0.084482729434967041, -0.33527031540870667, -0.080286294221878052, -0.56779587268829346, -0.19352903962135315, -0.49816754460334778, 0.093881331384181976, 0.49036842584609985, -0.26882502436637878, -0.45609843730926514, -0.53886812925338745, 0.44260570406913757, -0.90288054943084717, 0.24623610079288483, -0.10773186385631561, -0.1393444836139679, 0.22659045457839966, -0.47887313365936279, 0.041978958994150162, -0.25308659672737122, -0.08269239217042923, -0.48445841670036316, 0.40364399552345276, 0.52148902416229248, -0.12238413095474243, -0.49473100900650024, -0.10505632311105728, 0.59815424680709839, -1.6672605276107788, 0.44393625855445862, 0.071271196007728577, -0.13564606010913849, 0.17135421931743622, -0.99045664072036743, 0.11658111959695816, 0.19976834952831268, -0.033552773296833038, -0.36770719289779663, 0.21324215829372406, 0.54809087514877319, -0.12908877432346344, -0.53768670558929443, -0.21247336268424988, 0.34864389896392822, -1.2165887355804443, 0.4560096263885498, 0.084406062960624695, -0.35749545693397522, 0.040776349604129791, -0.54934746026992798, -0.033325895667076111, -0.12808512151241302, -0.43247717618942261, -0.2640763521194458, 0.32852214574813843, 0.61020803451538086, -0.078657634556293488, -1.1135847568511963, 0.0091053666546940804, 0.35039597749710083, -0.16400468349456787, 0.26689842343330383, 0.059288769960403442, -0.00055380456615239382, 0.37013515830039978, -0.52636373043060303, 0.10087039321660995, 0.22473691403865814, -0.048777475953102112, -0.58572465181350708, 0.64222627878189087, 0.36494511365890503, -0.20264919102191925, -0.35777562856674194, -0.25071236491203308, 0.14585176110267639, -0.41104140877723694, 0.35112383961677551, 0.0271949153393507, -0.075341261923313141, -0.18693754076957703, -0.71497297286987305, -0.17553356289863586, 0.4428119957447052, -0.13357231020927429, -0.52217960357666016, 0.63336938619613647, 0.23718509078025818, -0.13700428605079651, -0.5358847975730896, -0.035993829369544983, 0.38899564743041992, -0.60869258642196655, 0.50349891185760498, 0.019273813813924789, -0.069149002432823181, -0.21069988608360291, -0.31072884798049927, 0.33615893125534058, 1.0156790018081665, -0.28201702237129211, -0.46790602803230286, 0.774849534034729, 0.41747742891311646, -0.18518608808517456, -0.89854919910430908, -0.11721400171518326, 0.15105392038822174, -0.62347155809402466, 0.45582830905914307, -0.054879084229469299, 0.045155517756938934, -0.20473156869411469, -0.39720386266708374, -0.056145001202821732, 0.37686082720756531, -0.2121710330247879, -0.48384749889373779, 0.65337979793548584, 0.21042940020561218, 0.080462872982025146, -0.66533887386322021, 0.025556480512022972, 0.14461621642112732, -0.48705121874809265, 0.29359006881713867, -0.22916601598262787, -0.052798360586166382, 0.079359926283359528, -0.34333676099777222, -0.38822335004806519, 0.64220082759857178, -0.025560246780514717, -0.49926096200942993, 0.4850718080997467, 0.24206185340881348, 0.32171586155891418, -0.73672765493392944, -0.22320839762687683, 0.20712368190288544, -0.26861917972564697, 0.28233867883682251, -0.024006165564060211, -0.043757293373346329, -0.074284821748733521, -0.43845495581626892, -0.033803611993789673, 0.3140418529510498, -0.39577987790107727, -0.54211241006851196, 0.46265161037445068, 0.19448859989643097, 0.2120707631111145, -0.97899407148361206, 0.064422063529491425, 0.26718625426292419, -0.31686300039291382, 0.40155726671218872, -0.10257311910390854, 0.069406107068061829, -0.1895100325345993, -0.29720011353492737, 0.16311582922935486, 0.14743176102638245, 0.21000245213508606, -0.34301936626434326, 0.33576232194900513, 0.099786296486854553, 0.089493811130523682, -0.53842908143997192, 0.0061770593747496605, -0.048290316015481949, -0.16030110418796539, 0.47253596782684326, -0.28975304961204529, 0.041616786271333694, -0.23701885342597961, -0.30180582404136658, -0.15117152035236359, 0.25725686550140381, -0.073671787977218628, -0.23711174726486206, 0.27172258496284485, 0.13888970017433167, 0.17364943027496338, -0.23587495088577271, -0.06526733934879303, -0.05662161111831665, -0.29184925556182861, 0.52353858947753906, -0.15948636829853058, -0.015411291271448135, -0.45412307977676392, -0.098411746323108673, -0.1083642840385437, 0.3541431725025177, -0.060558073222637177, -0.0034422052558511496, 0.32263907790184021, 0.11669079959392548, 0.40580454468727112, -0.53660070896148682, -0.058342117816209793, 0.25110587477684021, -0.17606653273105621, 0.22156825661659241, -0.16102750599384308, 0.16972939670085907, -0.55675691366195679, -0.30222725868225098, 0.0052864197641611099, 0.27201166749000549, -0.19141499698162079, -0.032407950609922409, 0.38080921769142151, 0.05156996101140976, 0.45680004358291626, -0.40618333220481873, -0.17580887675285339, 0.011535312980413437, -0.34566196799278259, 0.34058856964111328, -0.23310764133930206, 0.24824774265289307, 0.25731852650642395, -0.011930681765079498, 0.44944050908088684, 0.14765472710132599, 0.17717769742012024, 0.13942945003509521, 0.24033935368061066, 0.22010856866836548, 0.44122779369354248, -0.38087573647499084, -0.26153907179832458, 0.026465091854333878, -0.12523588538169861, 0.42258390784263611, -0.08752172440290451, 0.049572911113500595, 0.24662135541439056, -0.25508645176887512, 0.30842146277427673, 0.48941642045974731, 0.027666233479976654, -0.052871726453304291, 0.34805348515510559, 0.16234408318996429, 0.53000468015670776, -0.33507737517356873, -0.39068624377250671, 0.18833117187023163, -0.15680992603302002, 0.41455018520355225, -0.032060269266366959, 0.27969706058502197, -0.25411081314086914, -0.18544432520866394, 0.054427031427621841, 0.28766253590583801, -0.18505609035491943, 0.0031460197642445564, 0.07012224942445755, 0.19504961371421814, 0.62623780965805054, -0.37119859457015991, -0.3765990138053894, 0.38693287968635559, -0.29997897148132324, 0.33936572074890137, 0.007153654471039772, 0.20219771564006805, -0.010553870350122452, -0.22952781617641449, 0.050209939479827881, 0.42292171716690063, -0.15257860720157623, -0.007974894717335701, 0.31905412673950195, 0.22607991099357605, 0.58909755945205688, -0.10448119044303894, -0.7992483377456665, 0.41324016451835632, -0.57041788101196289, -0.26009026169776917, -0.14285857975482941, 0.27208489179611206, -0.34457528591156006, -0.43061962723731995, 0.3582892119884491, 0.45734155178070068, 0.083519123494625092, -0.22980520129203796, 0.065539956092834473, 0.075201474130153656, 0.44453492760658264, -0.080327026546001434, -0.4556364119052887, 0.42181491851806641, -0.23021587729454041, 0.047875799238681793, 0.015632150694727898, 0.30743423104286194, 0.45551857352256775, -0.20531848073005676, 0.17344285547733307, 0.54541260004043579, 0.069348283112049103, -0.014580852352082729, 0.29834893345832825, -0.14525502920150757, 0.57614719867706299, -0.14611898362636566, -0.086375914514064789, 0.10409689694643021, -0.4106193482875824, 0.16581013798713684, 0.093158870935440063, -0.01288179587572813, 0.69214749336242676, -0.20947831869125366, 0.023735532537102699, 0.37799417972564697, 0.077203549444675446, 0.029471516609191895, 0.22169807553291321, -0.46475324034690857, 0.54731142520904541, -0.20184087753295898, -0.13719803094863892, -0.40140512585639954, -0.43667569756507874, 0.037823915481567383, 0.073419056832790375, 0.042875651270151138, 0.14672732353210449, -0.10679244995117188, -0.0044808872044086456, 0.76444548368453979, 0.15478190779685974, -0.088269338011741638, 0.076874539256095886, -0.035018898546695709, 0.53758072853088379, -0.092776447534561157, -0.17592094838619232, 0.15090680122375488, -0.018391188234090805, 0.10584390908479691, -0.024518202990293503, 0.18508963286876678, -0.80140703916549683, -0.70578640699386597, 0.1262669563293457, 0.62297201156616211, -0.13682349026203156, -0.24779844284057617, -0.14141800999641418, -0.45064076781272888, 0.25804984569549561, -0.23029664158821106, 
  0.056339975446462631, -1.1812252998352051, -0.50133782625198364, 0.20239672064781189, 0.0038519955705851316, 0.29841336607933044, 0.06787070631980896, -0.029037041589617729, 0.056456111371517181, 0.20445305109024048, 0.15049771964550018, 0.010722918435931206, 0.043247468769550323, 0.18710917234420776, 0.11090973019599915, 0.021275835111737251, -0.08428463339805603, 0.17514015734195709, -0.012731610797345638, -0.39532741904258728, 0.24025332927703857, 0.48828944563865662, 0.21646824479103088, 0.31873515248298645, -0.27587160468101501, 0.44484707713127136, -0.0003746662987396121, 0.15402930974960327, -0.40820363163948059, 0.32530191540718079, 0.2316293865442276, 0.17940139770507812, -0.033012367784976959, -0.20452119410037994, 0.083394728600978851, -0.2415347546339035, 0.049019079655408859, 0.63850879669189453, -0.23328398168087006, 0.058743782341480255, -0.31294000148773193, 0.33089551329612732, 0.20093947649002075, 0.10463133454322815, -0.16866201162338257, -0.088525131344795227, 0.046419672667980194, 0.14383865892887115, -0.03536803275346756, 0.17830905318260193, 0.086773321032524109, -0.236994668841362, 0.084202297031879425, 0.26907429099082947, 0.046662773936986923, 0.11958175152540207, -0.36890405416488647, 0.40923959016799927, 0.091010138392448425, 0.023245863616466522, -0.23088185489177704, -0.040196210145950317, 0.048045415431261063, 0.18649652600288391, 0.12864182889461517, 0.43290418386459351, 0.39445352554321289, -0.40275847911834717, 0.13940437138080597, 0.51011449098587036, 0.13872428238391876, 0.2520008385181427, -0.29372614622116089, 0.11524004489183426, -0.043305344879627228, 0.13986210525035858, -0.32440516352653503, -0.065438054502010345, -0.11637651920318604, 0.12310951948165894, 0.027854654937982559, 0.25690138339996338, 0.28837645053863525, -0.24846801161766052, 0.17593497037887573, 0.47958999872207642, 0.22740727663040161, 0.23134560883045197, -0.034483723342418671, 0.033666759729385376, 0.16448228061199188, 0.011892338283360004, -0.23666085302829742, -0.12929899990558624, 0.17976421117782593, 0.34068936109542847, 0.018649892881512642, 0.16511012613773346, 0.141743004322052, -0.15509052574634552, 0.097584903240203857, 0.46151518821716309, -0.015013721771538258, 0.31744486093521118, -0.38745322823524475, -0.019697792828083038, -0.37790137529373169, 0.25766700506210327, -0.53340309858322144, -0.044954776763916016, -0.0001136076170951128, 0.15200178325176239, -0.2387271374464035, 0.26708057522773743, 0.39692062139511108, -0.40404585003852844, 0.22008746862411499, 0.31677117943763733, 0.23299497365951538, 0.35678282380104065, -0.1997038871049881, -0.17465825378894806, -0.27250608801841736, 0.3022879958152771, -0.37043213844299316, -0.03100275807082653, -0.13254305720329285, 0.058198418468236923, -0.17008551955223083, 0.18588154017925262, 0.41499215364456177, -0.32280939817428589, 0.16051654517650604, 0.23733748495578766, 0.12741795182228088, 0.15366654098033905, -0.33575749397277832, -0.47406741976737976, 0.027564836665987968, 0.11827276647090912, -0.36048486828804016, -0.092473700642585754, 0.0097495494410395622, 0.25453180074691772, -0.24154141545295715, 0.19626891613006592, -0.019961491227149963, -0.28419893980026245, 0.17234429717063904, 0.18519231677055359, 0.28896763920783997, 0.31564304232597351, 0.083443738520145416, -0.054386712610721588, -0.016128890216350555, 0.060999929904937744, -0.36369776725769043, 0.1563999354839325, -0.1701032817363739, 0.27590349316596985, -0.14375884830951691, 0.21065334975719452, 0.19257242977619171, -0.32450920343399048, 0.26200702786445618, 0.41904202103614807, 0.50582009553909302, 0.25283694267272949, -0.041495565325021744, -0.20788951218128204, -0.074716873466968536, 0.22180724143981934, -0.13423418998718262, -0.018834766000509262, -0.042750019580125809, 0.18048843741416931, 0.014396247453987598, 0.088252000510692596, 0.29281434416770935, -0.160143181681633, 0.12059976905584335, 0.35236108303070068, 0.11161662638187408, 0.13930219411849976, -0.19493691623210907, -0.12783470749855042, -0.075659133493900299, 0.16030971705913544, -0.26629453897476196, -0.090879708528518677, -0.050546333193778992, 0.25608229637145996, 0.002245000097900629, 0.23135298490524292, 0.27780267596244812, -0.27109375596046448, 0.056019231677055359, 0.27747341990470886, 0.30676862597465515, 0.36149260401725769, -0.13402722775936127, -0.15057256817817688, -0.32474347949028015, 0.042326673865318298, -0.25974306464195251, 0.16121819615364075, -0.19594761729240417, 0.27641955018043518, -0.10015128552913666, 0.12424176186323166, 0.14465518295764923, -0.25752308964729309, 0.12598241865634918, 0.17973481118679047, 0.52200084924697876, 0.21432822942733765, -0.1208532527089119, -0.10742921382188797, -0.15658845007419586, -0.10757989436388016, -0.23575553297996521, -0.068690940737724304, -0.048445578664541245, 0.035524033010005951, 0.038758933544158936, 0.071333549916744232, 0.29900351166725159, -0.15529914200305939, 0.30471920967102051, 0.1493912935256958, 0.72930622100830078, 0.32630398869514465, -0.079242102801799774, -0.22003459930419922, -0.021877627819776535, 0.24699059128761292, -0.18494607508182526, -0.075580902397632599, -0.30328759551048279, 0.19947393238544464, -0.051018614321947098, 0.15354381501674652, 0.35734066367149353, -0.32389295101165771, 0.31954416632652283, 0.1866067498922348, 0.47766298055648804, 0.12947958707809448, 0.081636935472488403, -0.054754976183176041, -0.050790779292583466, -0.064667060971260071, -0.29741424322128296, 0.20642128586769104, -0.42931392788887024, 0.15599824488162994, 0.038283571600914001, 0.0018130774842575192, 0.18514944612979889, -0.022189851850271225, 0.1346118301153183, 0.11223693192005157, 0.10988552123308182, 0.33544331789016724, -0.34125775098800659, 0.12329424172639847, -0.048821311444044113, 0.1003134697675705, -0.07896074652671814, 0.21095135807991028, -0.37984204292297363, 0.045364066958427429, 0.014955189079046249, 0.13888159394264221, 0.1074083149433136, -0.13966742157936096, 0.29953542351722717, 0.13727191090583801, 0.013855483382940292, 0.33429211378097534, -0.4163433313369751, -0.2874845564365387, -0.24122552573680878, 0.12370264530181885, -0.063741259276866913, 0.058129221200942993, -0.41199964284896851, -0.030123930424451828, 0.15472313761711121, 0.001890583080239594, 0.25626730918884277, -0.28614100813865662, 0.19872190058231354, 0.18547272682189941, 0.20820847153663635, 0.36366561055183411, -0.26627025008201599, -0.5899280309677124, -0.097738131880760193, 0.10040058940649033, -0.27198001742362976, -0.012535978108644485, -0.27885821461677551, 0.2038690447807312, -0.11526569724082947, -0.0008059751708060503, 0.51525586843490601, -0.17020118236541748, 0.19993580877780914, 0.21131382882595062, 0.35986432433128357, 0.28199699521064758, -0.39049127697944641, -0.094292104244232178, -0.054380703717470169, 0.050676938146352768, -0.2008804976940155, 0.036378759890794754, -0.38765579462051392, 0.13623356819152832, 0.095222540199756622, 0.21934837102890015, 0.22288790345191956, 0.037304405122995377, 0.092176929116249084, 0.046372231096029282, 0.58787065744400024, 0.1162264421582222, -0.10302147269248962, -0.16477781534194946, -0.16192539036273956, -0.051616132259368896, -0.050643559545278549, 0.11039509624242783, -0.26510560512542725, -0.16197147965431213, -0.063266538083553314, -0.083886995911598206, 0.55829495191574097, 0.010810612700879574, 0.099115081131458282, 0.13610400259494781, 0.59091591835021973, 0.19848866760730743, -0.17233766615390778, -0.19267722964286804, -0.089045032858848572, -0.06297900527715683, -0.16627009212970734, 0.087765924632549286, -0.33518490195274353, 0.01807035319507122, -0.010716104879975319, -0.026818936690688133, 0.033722337335348129, -0.12582091987133026, 0.15929435193538666, 0.089195400476455688, 0.11931877583265305, 0.050292514264583588, -0.078224532306194305, -0.48472824692726135, -0.21046900749206543, 0.11459340155124664, -0.41476184129714966, 0.10147284716367722, -0.37731292843818665, 0.05255165696144104, 0.041982889175415039, 0.2351071685552597, -0.020203715190291405, -0.16326946020126343, 0.10324858129024506, 0.15761935710906982, -0.27854043245315552, -0.039605837315320969, -0.11606907844543457, -0.60024797916412354, -0.088184043765068054, 0.040082413703203201, -0.020531013607978821, 0.21554870903491974, -0.10990260541439056, -0.10021339356899261, -0.006934518925845623, -0.066624172031879425, -0.042689159512519836, 0.12130086123943329, -0.048780877143144608, 0.31393343210220337, 0.29596331715583801, 0.0051419590599834919, 0.075893260538578033, -0.46864804625511169, 0.11235174536705017, 0.25341582298278809, 0.15407922863960266, 0.083179190754890442, -0.1157776340842247, 0.099838823080062866, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,400 } };
const ALIGN(8) float tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const ALIGN(8) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.64916467666625977,0.96612590551376343,-0.19745118916034698,0.3959333598613739,0.36673691868782043,0.0692010298371315,-0.08169933408498764,0.16367317736148834,0.031746745109558105,-0.10288352519273758,0.090718790888786316,0.045634925365447998,-0.040638774633407593, 1.4090172052383423,-1.4585973024368286,0.59556382894515991,-0.4200606644153595,0.064901940524578094,-0.057672899216413498,-0.059584084898233414,-0.10915191471576691,0.12885984778404236,-0.14991819858551025,0.15414246916770935,0.04171004518866539,-0.013504352420568466, -0.47682175040245056,-0.23207198083400726,-0.03142174705862999,-0.10871338099241257,0.11717711389064789,0.15412017703056335,-0.17840734124183655,0.025894518941640854,0.070034712553024292,-0.089926354587078094,0.051350649446249008,-0.066930390894412994,-0.015384474769234657, 
  /* [1][0][][] */ -1.0957986116409302,0.23960693180561066,0.098667912185192108,0.2173139899969101,-0.1429913192987442,0.05572529137134552,-0.096970602869987488,0.16501368582248688,-0.10758338868618011,0.12272756546735764,0.055864531546831131,0.085010804235935211,-0.040116433054208755, -0.83791071176528931,-0.052182793617248535,-0.0810537189245224,-0.13096167147159576,0.1776321679353714,0.038715500384569168,0.0024103648029267788,-0.095827385783195496,0.016608085483312607,-0.068501144647598267,0.10970960557460785,-0.10487657785415649,-0.081632904708385468, 0.43877574801445007,-0.63202697038650513,-0.28849777579307556,-0.22627183794975281,-0.031078027561306953,-0.01347612589597702,0.23194034397602081,-0.065283156931400299,0.099772289395332336,-0.19757713377475739,-0.14180496335029602,-0.15781520307064056,-0.041587404906749725, 
  /* [2][0][][] */ -0.74745482206344604,-0.62904047966003418,0.44541671872138977,0.0086941579356789589,-0.17364861071109772,0.011762998066842556,0.037510979920625687,-0.12113209813833237,-0.087019652128219604,0.18955481052398682,-0.37068787217140198,0.30564898252487183,0.1168849915266037, 0.13908244669437408,-0.32200366258621216,-0.30192753672599792,0.065417364239692688,0.097170747816562653,-0.013474335893988609,0.20258045196533203,0.23442284762859344,-0.066819965839385986,0.11035966873168945,-0.087536707520484924,0.060469619929790497,-0.019451659172773361, 0.32719603180885315,-0.32970964908599854,-0.47884756326675415,0.011354290880262852,0.27481651306152344,-0.087973766028881073,0.3087848424911499,-0.0096831759437918663,-0.14451494812965393,0.36136993765830994,-0.27406281232833862,0.028912348672747612,0.06852375715970993, 
  /* [3][0][][] */ -0.86718583106994629,0.77663809061050415,-0.16850624978542328,-0.56632316112518311,-0.21331007778644562,0.18065130710601807,-0.19625003635883331,-0.12887710332870483,0.049285177141427994,-0.11744270473718643,-0.14130064845085144,-0.088832303881645203,0.033289235085248947, 0.044703327119350433,0.381346195936203,-0.15881308913230896,-0.11117418110370636,0.12453261762857437,-0.14007742702960968,-0.20965608954429626,-0.016085481271147728,0.047892484813928604,0.012701460160315037,0.14937001466751099,0.042223971337080002,0.26308333873748779, -0.46180817484855652,0.3711821436882019,-0.066629558801651001,-0.32806211709976196,-0.48063606023788452,-0.22601792216300964,-0.068556509912014008,0.015799252316355705,-0.012735802680253983,-0.13017380237579346,0.054758988320827484,0.12876971065998077,-0.12263023853302002, 
  /* [4][0][][] */ 0.22637166082859039,0.25554853677749634,0.39972361922264099,0.057738661766052246,-0.42000189423561096,-0.086301311850547791,-0.098975524306297302,0.034231871366500854,-0.019315563142299652,0.05041910707950592,-0.083321467041969299,0.20208264887332916,0.078348159790039062, 0.19312024116516113,0.12822671234607697,0.26091781258583069,0.43249356746673584,-0.39848142862319946,0.059431202709674835,-0.09154655784368515,-0.078274995088577271,0.14612801373004913,-0.075560882687568665,0.056596361100673676,0.015036109834909439,-0.11400627344846725, -0.054358609020709991,0.019151477143168449,0.69012284278869629,0.26161462068557739,-0.1724080890417099,-4.5676133595407009e-06,-0.54651272296905518,0.16205447912216187,0.022221701219677925,0.0425545834004879,0.051650110632181168,0.1492600291967392,-0.050815828144550323, 
  /* [5][0][][] */ 0.97086316347122192,0.097313374280929565,-0.0025566625408828259,-0.24888435006141663,0.10330747812986374,-0.031956229358911514,-0.12074261903762817,0.42400819063186646,-0.17708609998226166,-0.11107328534126282,0.22196108102798462,-0.022449061274528503,0.070885583758354187, 0.4052584171295166,-0.29425367712974548,-0.18011966347694397,-0.14872629940509796,0.12341446429491043,-0.21545091271400452,0.034461695700883865,0.11185330152511597,-0.041590884327888489,-0.08205278217792511,-0.16659483313560486,0.077350899577140808,0.030543750151991844, 0.1843118816614151,0.36838766932487488,-0.2776530385017395,-0.16656875610351562,-0.44469532370567322,0.10480429977178574,0.059882022440433502,0.24987483024597168,0.03761817142367363,0.09113764762878418,-0.16628806293010712,-0.14444226026535034,0.016224605962634087, 
  /* [6][0][][] */ 1.8220260143280029,0.22032606601715088,-0.2819383442401886,-0.11592185497283936,-0.36168381571769714,-0.013703740201890469,-0.027452854439616203,-0.053429409861564636,-0.028759809210896492,-0.19090862572193146,0.022687226533889771,-0.09209095686674118,0.18089635670185089, 0.29236257076263428,0.068018689751625061,0.22889570891857147,0.12777167558670044,0.21606524288654327,0.038678396493196487,0.060321804136037827,-0.017078513279557228,-0.12092914432287216,0.066616840660572052,0.057786412537097931,0.091269679367542267,0.043188504874706268, -2.1075582504272461,-0.43553456664085388,-0.054685685783624649,0.14240793883800507,0.13733287155628204,0.024776002392172813,-0.015562727116048336,-0.077146880328655243,0.11493203788995743,-0.003013762878254056,-0.001192424213513732,-0.074598483741283417,-0.088153332471847534, 
  /* [7][0][][] */ -0.43908014893531799,-0.28418383002281189,-0.5370296835899353,-0.055723331868648529,0.29879215359687805,-0.067024633288383484,-0.079381376504898071,-0.21070267260074615,0.13547976315021515,0.021607926115393639,0.009665338322520256,-0.14963324368000031,0.15723250806331635, -0.33783537149429321,-0.10270689427852631,-0.32924452424049377,-0.12294390797615051,0.18639113008975983,-0.081084951758384705,0.0052202255465090275,0.046027891337871552,0.066321901977062225,-0.16119740903377533,0.023356519639492035,0.0030794024933129549,-0.040103942155838013, -1.3405817747116089,-0.66893273591995239,0.19222582876682281,0.000134284608066082,0.024875914677977562,0.093874938786029816,-0.024670444428920746,-0.11934717744588852,0.10442907363176346,-0.16718454658985138,0.0061194589361548424,-0.18216493725776672,-0.0028683282434940338, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(8) float tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const ALIGN(8) float tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -0.18828640878200531,-0.055932752788066864,-0.43602561950683594,0.36322161555290222,-0.059253107756376266,-0.57720094919204712,-0.056269153952598572,-0.0096060894429683685, 0.26739212870597839,0.13654892146587372,-0.17628180980682373,-0.016553223133087158,-0.10051533579826355,-0.61302167177200317,0.26651611924171448,0.0071324724704027176, 0.18487873673439026,-0.12343424558639526,-0.088814385235309601,0.14141248166561127,-0.10966237634420395,0.24849176406860352,0.002990965498611331,-0.067549183964729309, 
  /* [1][0][][] */ -0.099460363388061523,-0.48627889156341553,-0.71281498670578003,0.15569938719272614,-0.1333545595407486,0.027259528636932373,-0.99979019165039062,-1.2773374319076538, -0.23473718762397766,-0.43472856283187866,-0.82107341289520264,0.086823306977748871,-0.53013670444488525,0.0058764368295669556,-0.58391702175140381,-1.0873562097549438, -0.28050711750984192,-0.88133007287979126,-0.45308595895767212,0.22235129773616791,-0.27083492279052734,0.1002015694975853,-1.0333377122879028,-0.48463210463523865, 
  /* [2][0][][] */ 0.11365951597690582,-0.39200878143310547,-7.9717545304447412e-05,-0.38577631115913391,0.057049933820962906,0.546558678150177,-0.41849741339683533,-0.19674810767173767, -0.12555687129497528,-0.73286658525466919,0.033189646899700165,-0.16396346688270569,-0.15326063334941864,-0.12201640754938126,-0.43813499808311462,-0.97693157196044922, 0.079771563410758972,-1.0379010438919067,0.028969870880246162,0.22770822048187256,-0.58316600322723389,-0.055081233382225037,-0.84965348243713379,-0.64568710327148438, 
  /* [3][0][][] */ -0.10588251054286957,-0.071059681475162506,-0.14161567389965057,-0.46596658229827881,-0.11734288930892944,-0.0095334965735673904,-0.14984871447086334,0.53352981805801392, -0.56196081638336182,-0.27831956744194031,-0.31133878231048584,-0.090755097568035126,-0.066751487553119659,-0.048282552510499954,-0.44631889462471008,-0.38777732849121094, -0.75979936122894287,-0.39000394940376282,-0.74041128158569336,0.081213265657424927,0.1430804431438446,-0.018499394878745079,-0.45480635762214661,-0.87552547454833984, 
  /* [4][0][][] */ -0.3015936017036438,-0.0080750510096549988,-0.074195362627506256,-0.23340572416782379,-1.2446681261062622,-2.3617527484893799,-0.77983659505844116,0.04310300201177597, -0.11777177453041077,-0.046185385435819626,-0.028043229132890701,-0.28167027235031128,-1.533718466758728,-1.5027346611022949,-0.79104578495025635,-0.039922371506690979, -0.061592631042003632,0.069622918963432312,-0.12439001351594925,-0.20815069973468781,-2.498199462890625,-2.229215145111084,-0.46806532144546509,0.10476845502853394, 
  /* [5][0][][] */ -0.14828303456306458,-0.48731592297554016,0.013161079026758671,-0.1016462966799736,0.30631238222122192,0.36693885922431946,-1.2495660781860352,-0.26274022459983826, -0.34528937935829163,-0.88268500566482544,0.024318991228938103,-0.044348951429128647,-0.1028798520565033,-0.15661028027534485,-1.0572702884674072,-0.23751772940158844, -0.33083897829055786,-0.70976549386978149,0.1700577437877655,-0.0038197189569473267,0.09112827479839325,0.25753012299537659,-0.54412758350372314,-0.5821148157119751, 
  /* [6][0][][] */ -0.10116434097290039,-0.98696368932723999,0.060102187097072601,-0.23239253461360931,0.40631607174873352,-0.87599742412567139,-0.093841433525085449,-0.74144512414932251, -0.030326608568429947,-0.76202267408370972,-0.63412672281265259,-0.22980815172195435,-0.094328559935092926,-0.75191026926040649,0.050682090222835541,-0.24364586174488068, 0.11096077412366867,-0.33919495344161987,-0.54639112949371338,-0.02067779004573822,0.40230059623718262,-0.60320848226547241,-0.078505098819732666,-0.38873305916786194, 
  /* [7][0][][] */ 0.17259453237056732,-0.72901767492294312,-0.21079814434051514,-1.1135116815567017,0.15374656021595001,-0.02710389532148838,-0.34164902567863464,-0.64798885583877563, 0.10581464320421219,-1.0329965353012085,-0.4462268054485321,-0.89951002597808838,-0.021711476147174835,-0.21615341305732727,-0.34069237112998962,-0.32547801733016968, 0.13611017167568207,-0.84714841842651367,-0.23338231444358826,-0.17478750646114349,0.15924784541130066,0.18799030780792236,-0.30836263298988342,-0.10528843849897385, 
  /* [8][0][][] */ 0.026988251134753227,0.033528879284858704,0.031195556744933128,-0.023853939026594162,0.10042014718055725,0.024884415790438652,-0.056930083781480789,-0.038077846169471741, -0.080481961369514465,0.08002878725528717,-0.017205914482474327,-0.057535290718078613,-0.10792260617017746,-0.259601891040802,-0.033776920288801193,0.46781706809997559, 0.094011671841144562,0.0061053717508912086,0.038317188620567322,-0.016184655949473381,0.14820608496665955,0.20828959345817566,-0.06653188169002533,0.0046487720683217049, 
  /* [9][0][][] */ -0.74037522077560425,-0.29182553291320801,0.21653552353382111,-1.1825495958328247,0.06058090552687645,-0.12035810202360153,-0.49982282519340515,-1.1184852123260498, -0.89819234609603882,-0.28376981616020203,-0.057115625590085983,-1.6589155197143555,-0.32557970285415649,-0.094393081963062286,-0.87052923440933228,-1.5372219085693359, -0.71743530035018921,-0.71195411682128906,0.43871021270751953,-1.7321282625198364,-0.078344658017158508,-0.1109158843755722,-0.55493295192718506,-0.2174527645111084, 
  /* [10][0][][] */ -0.14527037739753723,0.15052077174186707,0.0038516640197485685,-0.40429547429084778,-0.18816612660884857,-0.33925825357437134,-0.11551980674266815,-0.11567641049623489, 0.17763428390026093,-0.10890009999275208,0.081290073692798615,-0.52227020263671875,-0.17398065328598022,0.22815598547458649,0.030750034376978874,-0.5297623872756958, -0.27111110091209412,-0.22918409109115601,-0.36696135997772217,-0.21965073049068451,-0.015975797548890114,-0.070504374802112579,0.28646555542945862,-0.28043979406356812, 
  /* [11][0][][] */ -0.04438440129160881,0.064095251262187958,-0.51643264293670654,0.15897811949253082,-0.56174862384796143,-0.94491207599639893,-0.12751120328903198,0.031454533338546753, -0.29412558674812317,0.11105550080537796,-0.78736627101898193,0.051939640194177628,-0.25342008471488953,-1.2025974988937378,-0.036331970244646072,-0.028917111456394196, 0.15224519371986389,0.1715092658996582,-0.5516122579574585,0.178042933344841,-0.4042586088180542,-1.4329419136047363,0.22070293128490448,0.084790520370006561, 
  /* [12][0][][] */ -0.62722319364547729,-0.66320359706878662,-1.5061193704605103,-0.065976753830909729,0.31999683380126953,0.057585325092077255,0.10002763569355011,-0.89931851625442505, -0.28195184469223022,0.044323325157165527,-0.00995625089854002,-0.30908545851707458,-0.04619704931974411,-0.41941773891448975,0.24062159657478333,-0.14899322390556335, 0.060044310986995697,0.15876786410808563,0.24446137249469757,-0.33104678988456726,-0.20529583096504211,-0.6570277214050293,-0.23699639737606049,0.10343306511640549, 
  /* [13][0][][] */ -0.56277060508728027,-0.21669633686542511,0.0097210267558693886,0.23303699493408203,-0.035047594457864761,-0.032101497054100037,-0.57305258512496948,-0.4121563732624054, -0.85410004854202271,-1.5666857957839966,-0.50984513759613037,0.043692070990800858,0.054994132369756699,-0.02189231850206852,-0.62294954061508179,-2.422645092010498, -0.32706505060195923,-0.35460770130157471,-0.0082057835534214973,0.15411959588527679,0.12437228113412857,-0.084294043481349945,-0.02551625669002533,-1.0559009313583374, 
  /* [14][0][][] */ -0.48583841323852539,-0.069822452962398529,0.078180640935897827,-1.2247378826141357,-0.38584402203559875,-0.17185483872890472,-0.68502074480056763,-0.32028666138648987, -0.22403512895107269,-0.23286451399326324,0.030398542061448097,-0.68761008977890015,-0.7384987473487854,-0.08301108330488205,-0.1107632964849472,-0.2850269079208374, -0.16417591273784637,-0.29572537541389465,0.063356891274452209,-0.25413486361503601,-0.84995532035827637,-0.1030261218547821,-0.21354755759239197,-0.30882111191749573, 
  /* [15][0][][] */ 0.2810116708278656,0.064776070415973663,0.0013940900098532438,-0.25310304760932922,-0.0074622258543968201,-0.073205351829528809,-0.040408693253993988,-0.12233511358499527, 0.0046784966252744198,-0.079601041972637177,-0.085449554026126862,-0.2569236159324646,-0.075498372316360474,-0.01623045839369297,0.073767527937889099,-0.89846396446228027, 0.42705619335174561,-0.3232453465461731,-0.17672780156135559,-0.072406068444252014,0.015987606719136238,0.27385175228118896,0.099545702338218689,-0.30859583616256714, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 99, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 99, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 50, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,99,13 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,99,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,99,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,99,8 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,99,1,8 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,50,16 } };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,50,16 } };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,50,16 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,50,1,16 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,25,1,16 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,400 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension0, 5148, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4800, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1248, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 5148, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension17, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension19, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension21, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension23, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension25, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension27, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension29, 12, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
