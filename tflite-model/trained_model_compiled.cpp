/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 19.12.2020 13:35:28

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 6816;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045607279986143112, } };
const TfArray<1, int> quant0_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -8228, -6594, -2213, -7317, -9645, -6346, -9245, -4860, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 7.4049232352990657e-05, 7.1944006776902825e-05, 9.4968025223352015e-05, 8.5386200225912035e-05, 8.0617763160262257e-05, 7.7847980719525367e-05, 7.7878510637674481e-05, 9.2028356448281556e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -467, -13423, -754, -1027, -1144, -8794, -4039, -13766, -103, -1428, 2658, -698, -13586, -5290, -3307, -2730, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 6.4381885749753565e-05, 4.5646313083125278e-05, 7.2148686740547419e-05, 6.1855411331634969e-05, 6.6247106587979943e-05, 6.5995744080282748e-05, 5.7074990763794631e-05, 7.01979297446087e-05, 7.5927782745566219e-05, 6.3989944464992732e-05, 7.0983063778840005e-05, 6.9840221840422601e-05, 6.9664114562328905e-05, 6.638822378590703e-05, 6.017067062202841e-05, 6.8378132709767669e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -998, 3686, -2366, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 8.1575955846346915e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(8) int8_t tensor_data6[3*832] = { 
  -63, -70, 20, 24, 62, -22, -75, 6, -83, 67, -118, 69, -39, 75, 78, 70, 29, 11, 20, -39, -55, 19, -29, 9, -24, -9, -14, 1, -11, -46, -39, -68, 40, 70, -23, -11, -18, 47, -8, -8, 11, -25, 36, 20, 18, -10, 1, -39, 32, 13, -72, -82, -45, -36, -15, 24, -2, -45, 31, -12, -11, -75, 13, -3, -5, 8, 28, -1, 43, -15, -107, 47, -69, 30, -105, 40, -120, 12, 34, 35, 1, -5, 8, 7, -57, 7, 32, 17, -49, 20, -22, 5, -1, 27, -24, -69, 56, 45, -63, -20, -38, 40, -2, 30, 10, -29, -11, 45, 29, -4, -23, -5, 65, -9, 17, 15, -78, 23, 44, 60, 31, -66, 22, 58, 16, -10, -9, -32, 7, -26, 21, -13, 56, -7, -56, 15, -98, 43, -60, 52, -107, -19, -16, 44, -32, -13, 16, 13, -10, 40, 24, 1, -47, 13, 13, -19, -15, -13, -57, -40, 41, 79, -23, 22, -22, 61, 6, 18, 11, -57, -9, 90, 23, 3, 11, -17, 22, -25, 38, 39, -20, 8, 42, 14, -5, -4, -78, -18, 29, -29, 28, -1, -2, -27, -7, -20, 44, 10, -76, -24, -113, 12, -56, 54, -105, -37, 11, 63, -16, 12, 13, 25, -35, -35, 29, -6, -54, -3, -26, -28, 8, -61, -54, -53, -6, 18, -13, 7, -6, 16, -3, -33, 17, -37, 47, 50, 8, -21, -41, -19, -5, -1, -13, 35, -67, 61, 76, -55, -37, -69, 3, -27, 35, 26, -19, 59, -10, -26, 1, -2, 65, -24, -43, -25, -62, 36, -25, 59, -83, 20, 40, 21, -8, 9, -3, 36, -48, -33, 0, -9, -51, -26, -32, -11, -2, -43, -77, 26, 17, 39, 30, -11, 27, -33, 1, -40, -33, -14, -33, 14, -7, 1, 8, -38, 34, 34, 4, 27, -20, 15, 33, 23, -8, 9, -55, 48, 12, -5, 14, -14, -9, -27, 8, -15, 53, 8, -99, -49, -29, -17, -34, 10, -117, -29, 0, 43, -26, 15, -27, 42, 5, -10, 15, 0, 0, -23, -48, -16, 30, -44, -49, -10, 8, 27, 18, 14, -12, -21, -2, -6, -35, -23, 4, 40, -12, 0, -54, -26, 34, -16, 20, 38, -80, 36, 51, 15, 10, -13, -19, 35, 48, -1, -39, -22, 12, -7, 29, -4, 48, -19, -81, -32, -56, -12, -39, 36, -127, -9, 21, 0, -15, 6, -11, 44, -13, 16, 16, 9, -19, 15, -7, -9, 9, -4, -46, 4, 3, 42, 48, -15, -15, -33, -4, -5, -8, -29, -20, -13, -3, -50, -37, -53, 2, -13, 42, 29, -11, 9, 29, -69, 35, -14, 40, -40, 37, -15, -45, 25, -1, -4, 23, -15, 48, -12, -79, -23, -6, -32, -60, 35, -84, -10, 15, -21, 9, 12, -43, 34, -28, 20, -9, 3, -25, -45, -11, -14, 0, -10, -51, -52, 17, 16, 23, 1, 27, 13, -5, 37, 8, -5, 2, -16, 6, -19, -8, -50, -71, -1, 30, 42, 44, 17, 36, 15, 14, -54, 43, -53, 43, -16, -25, -9, 5, 16, 22, -2, 63, -21, -57, -23, -36, 35, -74, 24, -47, -16, 31, 0, 5, 16, -11, 18, 11, 51, 28, 38, -14, -21, -33, -25, -4, -56, -16, -15, 41, -6, 56, -20, -9, -41, 25, 8, -17, 14, -12, -29, 20, -26, -13, -31, -21, -23, 33, 24, 56, 27, 16, 31, -38, -2, 4, -33, 22, -6, -14, -44, 13, 8, 31, 16, 61, -18, -69, -16, -25, 43, -54, 50, -61, 6, 17, 32, -12, 8, -70, 39, -2, 24, -7, 21, -21, -29, -34, -33, 21, -60, 0, -20, 23, -1, 56, -11, 40, 9, -11, 9, -12, -36, 3, -15, -5, 5, -8, -33, -46, -37, 33, 30, 63, -33, 15, -64, -39, 22, -24, 20, 2, -15, 2, -13, -12, 6, 28, 17, 40, 4, -34, -19, -23, 39, -95, 21, -30, 101, 57, 51, -21, -5, -32, 24, -9, 25, 22, 34, -24, -15, -32, -29, 25, -49, -45, -46, 36, -3, 50, -29, -2, -26, 12, -7, 6, -47, 22, 24, 2, -9, -6, -7, -25, -39, -11, -71, -71, -12, 35, 54, -17, -19, -9, 39, 6, -5, -28, -18, -1, -12, 41, 25, 34, -1, -7, -23, 20, 83, -70, 28, -13, 34, 66, 37, 0, -13, -55, 24, -16, -9, 13, 14, -11, 2, -14, -43, 31, -31, 3, 7, 19, -55, 42, 17, 3, -10, -5, -24, 15, -89, 27, -1, -26, -49, -31, -39, 1, -25, -7, 7, 22, -13, -1, 40, 6, -8, 49, -7, 31, -59, -23, -7, 7, 28, 16, 47, 48, 8, -5, -15, -16, 102, -29, 43, -32, 29, 27, 37, -10, 25, -15, 14, -8, -20, 22, -11, 7, 29, -2, -35, 4, 36, -26, 16, 17, -30, 16, -25, 37, 36, 2, 16, 11, 11, 30, -42, -25, -46, -50, -36, -5, -38, -32, -7, -8, -2, -14, -43, -37, -26, 39, 16, -9, 30, -104, -25, 
  -2, 24, -10, 5, -34, 26, 41, -10, 40, -60, 26, -18, 14, -23, -30, -23, -29, -20, 1, 12, 60, 7, 12, -25, 3, 6, -69, -10, 27, 26, 39, 20, -4, -20, 33, 11, 42, 5, 25, 3, -25, 67, -41, 18, 19, 3, -1, 14, 15, 17, -2, -6, -8, -5, 8, -40, -29, 20, -22, -16, -13, 3, 10, 6, -15, -4, -11, 5, -23, 21, 63, -72, 45, -35, 69, -46, 31, -11, -58, -9, -2, 7, -2, -15, 61, -31, -9, -12, 4, -25, -45, -19, 4, -36, 47, 20, -14, -13, 60, 26, 12, 4, -6, -66, -5, 12, 20, -33, -30, 18, 2, 18, -52, 6, -22, -38, 44, 38, -49, -42, -18, 68, -30, -40, 46, 14, 21, 5, -66, -11, -15, 36, -43, 4, 52, -40, 64, -45, 59, -5, 38, 18, 46, 10, -1, -27, -29, -17, -8, -55, -8, -20, -5, 18, -73, 29, -27, -4, 15, 32, -33, -51, 36, -42, 3, -12, -10, 6, 1, 17, 4, -56, 5, 11, 13, -15, 16, 17, -12, -29, 34, 9, -93, -15, -31, -12, 37, 53, 26, 13, -28, 15, -43, -15, -10, 49, -52, 16, 45, -18, 67, 16, 60, -18, 37, 59, 0, 2, -34, -37, -23, -27, 7, -8, -21, -22, 11, -25, 5, -21, -26, -1, 45, 5, 13, -32, 22, -32, 49, 17, -60, 30, -16, -13, -46, 17, -66, 28, 36, 28, 5, 28, 66, -25, 50, 13, -61, 16, 16, 41, -15, 18, -53, -9, 33, -12, -38, 10, -5, 42, -80, 21, -8, -10, 73, 16, 40, -46, 48, 10, 37, 7, -15, -7, 6, -5, 35, -6, -46, 5, 17, 8, 7, -31, -40, 7, 15, -10, 38, -61, -1, -6, -30, 19, -47, 35, -1, -8, 38, 9, -15, -11, -13, 14, -66, -14, 31, -45, 34, -3, -19, -5, 46, -23, 16, -53, 2, -43, -9, 0, -42, 10, -33, 26, -50, -66, 55, -8, 68, 16, 54, -36, 43, 1, 35, 13, -38, -92, 8, -39, -27, 39, -25, -15, -28, -10, 10, 29, -73, -3, 27, 23, 18, -21, -20, -28, 14, -25, -5, -17, 28, 24, 31, -13, -37, -2, 14, 34, -41, -29, 12, -35, 15, 10, -88, -51, -3, 25, 16, -53, -58, 1, 28, 1, -116, -36, -48, 36, -43, 17, 32, -91, 58, 69, 53, -33, 32, -8, 20, -11, 37, -47, 40, -19, -28, 12, 6, -3, 1, -47, -13, -10, -41, -20, 14, 16, -15, 1, -28, -6, 11, 23, -42, -28, -15, 51, 11, -16, -26, 50, 44, 39, 17, -56, 12, -60, -3, -27, -56, 15, -36, 3, -53, -29, -47, 25, 39, 7, -81, -17, -40, 30, -37, -32, 5, -61, 33, 78, 16, -15, 4, 58, 15, 34, 3, -46, 30, -38, -25, 35, -24, 1, -7, 15, -5, 9, -26, 8, 15, 62, -24, -45, 0, -24, 15, -15, -19, -76, -18, 50, -3, -30, -42, 9, 15, 25, 52, -49, 36, -48, 32, -2, -81, -4, -7, 42, 29, -8, -44, 34, 6, 26, -67, -40, -46, 42, -32, 18, 32, -13, 45, 33, 17, -41, -13, 44, 67, 46, -10, -47, -12, -19, -24, 10, -35, -67, 7, -39, -7, -31, -35, -4, 2, 29, -29, 8, -14, -11, 17, -29, -45, -96, -4, -25, 17, 46, -38, 71, 7, 19, -10, 25, 20, -28, -10, -2, -67, -7, 12, -7, -3, -26, -94, -15, 27, 27, -51, -25, -42, 46, -65, -5, 20, -57, 49, 10, 69, -31, -10, 4, 51, 21, -60, -12, 12, -17, 29, -5, -34, -63, 7, 23, -6, 3, -43, 13, 23, 41, -14, 0, 9, 23, -19, -4, -12, -11, 4, -10, 9, -1, 3, -37, 18, 9, 21, 38, -43, 46, -31, 64, -31, 61, 65, -3, 7, -29, 8, -24, -11, -10, -42, -2, -21, 31, -55, 23, 57, -41, 72, -24, 34, -1, -6, -94, 2, 2, -18, -5, 32, 13, 23, -65, -19, -36, 2, 7, -31, 10, -26, 36, 27, 27, -16, 0, 6, 19, 20, 3, -26, 19, -21, 11, -76, -29, -16, -15, 11, 18, 4, 23, -15, 49, 16, -7, -34, -117, 25, -1, 12, -31, -43, -6, 24, 74, -26, -14, -27, 14, -60, -10, -6, -52, 45, -40, 32, 38, -27, 0, 18, 5, -26, -1, 24, -13, 8, -15, 22, -26, 1, 51, -52, -12, -1, 29, 45, 18, -22, -5, 13, -2, 14, -20, 14, -11, -22, 25, -49, 23, 32, 52, -5, -5, 26, -4, 16, 24, -4, -72, 12, -34, 16, 16, -69, 73, -112, 56, 23, 35, 4, -61, -12, -32, 19, 33, 1, -49, 34, -49, 20, -18, 32, -49, 17, 25, 3, -15, 10, -47, 56, 1, 19, 17, -10, 39, 11, -42, -10, -50, 9, -28, -5, -35, 0, 10, 18, -37, -43, -87, -14, -24, -19, 33, -6, 15, 5, 23, 35, 35, 57, 6, 7, -14, 24, 3, 39, -13, 26, 3, 23, -38, 48, -17, 
  39, 14, -9, -15, -10, 2, -2, 18, 13, -32, 22, -48, 2, -51, -36, -51, -35, 34, -23, 29, 4, -15, 2, 9, 4, 6, 53, 16, -4, 7, -3, 36, -36, -39, 16, -6, -17, -29, -26, 9, 3, -49, 11, -31, -48, -7, -10, 32, -56, -41, 70, 63, 19, 26, 9, 9, 17, 29, -11, -5, 14, 53, -16, -3, 26, 30, -12, -7, -10, 10, 18, 27, -9, 4, 8, -14, 46, -18, -4, -14, 3, 10, 10, -3, 5, 6, -23, 3, 39, -3, 65, 25, 6, 4, -8, 34, -53, -26, 23, 1, 21, -33, 14, 27, 6, 13, -22, -9, 9, -5, 4, 10, -44, 8, -13, 17, 12, -47, 0, -4, -31, -8, -5, -36, -49, 4, -1, 10, 31, 33, -8, -22, -7, 15, -30, 30, 6, -4, 11, -43, 54, -10, -40, -43, 10, 34, -11, 12, 18, 10, -6, 26, 63, -18, 50, 13, 25, 13, 11, 17, -27, -28, 5, 12, -10, -35, 17, -33, -1, 37, 13, -24, 0, -16, 10, 25, -39, -20, -34, -3, -10, -9, 6, -6, 27, 16, 19, -46, -41, 0, -9, -18, 42, 37, 6, -40, -17, -7, 19, 53, -6, -26, -14, -34, 41, -22, -2, -53, 34, 18, 12, 19, -3, 39, 4, 16, 22, 32, 26, 20, 9, 34, 3, 26, -8, -10, -1, 31, -31, -25, 38, 34, -11, 21, 1, -32, 35, -11, -10, -10, 4, -18, -45, -7, 6, -68, -31, 19, 6, 9, 18, -15, 3, -8, -27, -21, 41, 28, 20, -19, -19, 33, 53, 33, 3, -43, 11, 9, 33, -24, -64, -22, 21, 7, -5, -27, 25, 16, 17, 1, 24, 2, 33, 16, 34, 27, 37, -15, -30, -13, -20, 3, 9, 24, 24, 11, 6, -6, -10, -19, 10, -6, 18, 13, 2, -20, -21, 38, -2, 0, -10, -8, -35, 32, 41, -16, -20, 27, 2, 11, 19, 33, 1, -17, -27, 43, 6, 3, -23, -7, -24, -1, 33, 21, -35, -56, 39, 34, 29, -3, 24, -14, 14, 16, 16, 37, 24, -4, 23, 18, 15, -5, -22, -9, -5, 19, -1, 48, 21, -14, 0, -18, -12, -4, 9, -13, 16, -7, 11, 54, -27, -12, 38, -56, -5, 21, -15, -17, 21, -10, 0, 6, 17, 21, 58, 37, 23, 0, -30, -8, 36, 61, -6, -55, -4, 11, 52, 12, -19, 7, 24, 23, 7, -14, 29, -23, 6, -7, 8, 27, 9, 5, 12, 28, 17, -26, -3, -24, -15, 1, -22, -5, 34, 7, 30, -37, -6, 8, 22, 5, -22, 1, -4, 38, -54, 32, 0, 24, 2, 27, -2, 3, 13, 57, 15, -4, 1, -21, 52, 19, -5, -26, -22, 43, 55, 53, -12, -47, 18, -16, 66, -47, -44, -22, 9, 21, 21, -16, 35, -54, 24, 7, 34, 34, 17, -4, 18, 9, 9, -18, 0, 22, -17, 1, -32, 7, 28, 14, -2, -41, -10, 32, 39, -13, 1, 12, 22, 39, -65, 11, -62, 8, 14, -28, -6, 5, -40, 48, -21, -14, 7, -23, 32, 10, 31, -25, -5, 7, 1, 24, -14, -30, 36, 7, 46, -29, -91, -46, 23, 2, 18, -25, 11, -48, 4, 16, -2, 44, 7, 41, 25, 52, 9, -12, 0, -12, -32, 29, -19, 26, 30, 34, 9, 22, -19, -16, 2, -40, 14, 11, -2, -2, -67, 15, -36, -36, 24, -30, 17, 21, 16, 38, 21, 12, -18, 34, 8, 0, 4, -37, -14, 28, 27, 45, -36, -65, -9, -28, 34, -21, -49, -44, 42, 6, 43, -20, 5, -21, 11, 25, 1, 11, 41, 34, 9, 17, -24, 0, -8, -5, -67, 1, -16, -31, 12, 0, -14, 40, 11, 25, -2, 8, 6, 2, 12, 11, 13, -46, -38, -11, 13, -11, -15, -10, 22, 9, -8, 21, 4, 19, 43, -27, 2, -61, -6, -25, -21, 48, -49, -38, 26, -25, 25, -24, -44, -62, 38, -20, 3, -24, 0, 37, -6, -10, 23, 13, 82, 23, 4, 24, 1, 3, -15, 12, -55, -6, -20, 7, 8, -34, -2, 28, 44, 18, 17, 23, 11, 21, 16, 36, 9, -4, 23, -5, -12, 22, -11, -4, 26, 6, -1, -20, 13, -47, 27, 15, -2, -50, 4, 10, 14, 42, -41, -27, 28, -62, 38, -31, -55, -72, 27, 13, 20, -19, 10, 19, -41, -8, 5, -24, 29, 33, -34, 2, -23, -7, 8, 53, -46, -5, -3, 12, -4, 13, -5, 46, 14, -19, -1, -13, 2, 15, -5, 11, -7, -6, -3, 73, -11, -24, -12, -18, 18, -82, 52, 1, 23, -2, -32, 21, -36, -18, -70, -34, -15, 69, -43, -38, 13, -7, -26, 21, -35, -84, 6, -5, -12, 13, -61, 19, -19, -33, -26, -34, 0, 65, 7, -1, 21, 13, -19, 47, -36, 24, -54, 31, 14, 71, -3, 8, -4, 4, 16, 41, 8, 18, -25, -9, 0, -14, 2, 15, 0, 25, -17, 40, -34, -22, -10, -7, 38, 31, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,832 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0065233232453465462, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*3*3*1] = { 
  /* [0][0][][] */ 118, 97, 127, 
  /* [0][1][][] */ 74, 101, 73, 
  /* [0][2][][] */ 71, 63, 98, 
  /* [1][0][][] */ -38, -93, -62, 
  /* [1][1][][] */ -95, -53, 127, 
  /* [1][2][][] */ -48, -47, -92, 
  /* [2][0][][] */ 52, -52, 15, 
  /* [2][1][][] */ 31, -33, 1, 
  /* [2][2][][] */ -127, 113, -14, 
  /* [3][0][][] */ -19, 77, -78, 
  /* [3][1][][] */ -37, 72, -50, 
  /* [3][2][][] */ -77, 127, -103, 
  /* [4][0][][] */ 116, 76, -73, 
  /* [4][1][][] */ 64, 54, -57, 
  /* [4][2][][] */ 127, 56, -52, 
  /* [5][0][][] */ 43, -108, 33, 
  /* [5][1][][] */ 59, -104, 45, 
  /* [5][2][][] */ 93, -127, 23, 
  /* [6][0][][] */ -23, -120, -73, 
  /* [6][1][][] */ -45, -71, -91, 
  /* [6][2][][] */ 7, -127, -23, 
  /* [7][0][][] */ -107, -59, -42, 
  /* [7][1][][] */ 127, 112, 20, 
  /* [7][2][][] */ -53, -41, -21, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0016236274968832731, 0.0015774675412103534, 0.0020822996739298105, 0.0018722055247053504, 0.0017676511779427528, 0.001706919982098043, 0.0017075894866138697, 0.0020178435370326042, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ 53,-5,-54,24,64,-124,-76,-45, 54,-36,-74,-2,-33,12,-36,-48, -38,6,-3,3,3,1,62,-64, 
  /* [0][1][][] */ 11,-101,-127,23,63,-97,-65,-95, -21,-17,-83,6,12,-4,-47,-108, -22,24,-39,-1,5,3,5,-45, 
  /* [0][2][][] */ 42,-120,-86,46,44,-79,-87,-90, 16,-51,-100,18,-17,-20,-19,-116, -9,-12,-49,11,-3,22,5,-69, 
  /* [1][0][][] */ -7,1,28,32,119,-15,22,-32, -22,25,-36,-22,-67,-24,-10,4, -31,-4,-32,39,52,-12,98,-25, 
  /* [1][1][][] */ 81,-3,31,11,14,-32,6,-34, -127,11,27,-37,-62,6,24,-62, 2,18,-11,12,-45,67,33,-66, 
  /* [1][2][][] */ 43,24,18,83,53,15,80,-21, -76,43,-5,34,-12,30,22,-24, -12,34,26,105,-10,51,-2,-18, 
  /* [2][0][][] */ -74,8,-42,-44,-47,16,47,-36, 40,-98,-1,-11,30,-57,-80,-17, -30,21,29,2,28,14,-2,-15, 
  /* [2][1][][] */ -62,39,4,-36,-41,37,4,-64, 20,-89,-48,-7,30,-69,-99,-73, -5,-7,12,22,-14,-8,28,-23, 
  /* [2][2][][] */ -121,26,-5,-40,-102,2,13,-40, 11,-84,-35,-6,29,-127,-98,-64, 6,-23,5,8,2,25,-13,16, 
  /* [3][0][][] */ -72,-67,19,18,-33,-86,-17,-22, -107,26,37,-32,-97,54,-13,-45, 5,-15,31,-22,54,-51,-2,-9, 
  /* [3][1][][] */ -117,6,46,36,-70,-54,-79,-40, -120,7,55,-11,-3,21,38,2, 5,5,-1,-12,-1,-127,-23,31, 
  /* [3][2][][] */ -117,-2,21,-11,-84,19,-116,-26, -90,-16,2,21,-17,50,34,-29, 0,22,-1,20,26,-37,-9,-44, 
  /* [4][0][][] */ -105,74,-65,-80,-118,-1,-44,-12, 23,-65,-76,-35,-24,-74,-75,-14, -13,-68,28,-29,42,58,-66,-37, 
  /* [4][1][][] */ -85,28,-59,-80,-85,-24,72,-68, -19,-7,-11,-4,-3,-127,-86,23, -12,-76,37,-61,5,0,-61,-23, 
  /* [4][2][][] */ -111,34,-39,-34,-40,-7,-2,-15, 2,-3,-6,-19,-10,-96,-68,-26, 13,-37,45,-43,-34,90,-40,-17, 
  /* [5][0][][] */ 44,-55,-46,-31,-49,52,-10,-20, -113,-39,-11,10,8,26,-52,-6, -4,-9,-20,4,-36,-1,3,-57, 
  /* [5][1][][] */ -25,-30,51,-42,-50,-71,-39,-8, -70,-69,7,-13,-16,7,14,-58, -19,45,16,-43,-27,-82,-14,5, 
  /* [5][2][][] */ -93,-21,-24,-48,-127,-19,-38,-53, -48,-55,-1,-122,43,67,-14,25, -24,22,-21,44,8,10,90,-36, 
  /* [6][0][][] */ -116,-43,30,107,-91,93,-23,-12, -20,0,-34,-10,-35,-31,-29,25, -23,-29,-33,20,-20,-75,-98,-67, 
  /* [6][1][][] */ -62,-8,20,40,-45,-10,-6,13, -11,10,-22,45,50,3,-40,-56, -89,1,-10,32,-58,-127,-38,-19, 
  /* [6][2][][] */ 10,-27,34,58,-26,71,-8,0, -82,-2,-8,-46,-25,32,4,-15, -71,-38,-39,3,-35,-63,13,-4, 
  /* [7][0][][] */ 66,-124,7,-4,26,23,-23,-57, 33,-103,-16,5,19,10,-27,-52, -127,61,-43,12,-28,10,65,-11, 
  /* [7][1][][] */ 2,-68,6,-2,42,-38,34,-11, 20,-59,-19,24,2,-35,19,-21, -87,54,-10,16,0,29,8,-53, 
  /* [7][2][][] */ 71,-64,-12,-57,-27,-73,0,-85, 26,-66,-61,39,31,-78,3,-57, -53,42,-13,5,-10,23,42,-13, 
  /* [8][0][][] */ -82,-62,-78,-63,-56,-46,-83,-44, -20,-30,41,45,-12,-7,-35,35, 0,6,11,-54,0,-9,-17,26, 
  /* [8][1][][] */ -74,-62,-96,-77,-64,-108,-96,-41, -6,-27,49,-44,1,6,-35,36, 14,-16,11,-49,4,-2,6,-3, 
  /* [8][2][][] */ -106,-72,-72,-84,-127,-98,-86,-41, -64,-18,61,-19,-49,4,-38,4, -18,9,17,-35,-23,-7,-16,18, 
  /* [9][0][][] */ -80,36,-19,-64,-84,-5,-33,28, -67,72,41,-88,-109,5,40,-118, -3,-25,38,3,-17,50,-37,-1, 
  /* [9][1][][] */ -119,84,-59,-127,-86,-45,82,63, -104,7,17,-30,-121,30,-12,21, 23,-31,-15,21,-82,-6,-47,-36, 
  /* [9][2][][] */ -85,-50,-23,-113,-109,-70,-55,-13, -52,35,-29,-51,-80,9,77,-3, -4,-55,-16,8,-15,-11,-100,-4, 
  /* [10][0][][] */ -17,-69,-13,-9,-44,-71,-92,-44, 2,-59,34,58,6,2,-39,-32, -2,33,-7,-56,-19,-21,32,39, 
  /* [10][1][][] */ -108,-97,-14,-105,-95,-114,-105,-86, -85,-55,3,-2,-58,-18,-44,-15, -26,8,-6,-57,-18,-35,-27,1, 
  /* [10][2][][] */ -114,-85,-69,-64,-125,-93,-86,-96, -127,-30,11,1,-107,-18,-38,-72, 5,-1,-15,-64,-48,-42,-35,35, 
  /* [11][0][][] */ 6,-117,-89,5,13,-66,-83,-114, -54,42,-5,-46,-82,8,1,-40, -28,6,28,46,3,28,61,-33, 
  /* [11][1][][] */ 14,-87,-86,-54,-7,-84,-101,-90, -49,-19,-32,-58,-71,15,33,-15, -25,1,15,-3,30,-53,8,34, 
  /* [11][2][][] */ 41,-79,-43,-96,-77,-127,-85,-39, -4,-49,-49,-24,22,5,-79,-10, -30,-46,12,62,16,-113,-63,42, 
  /* [12][0][][] */ 19,-16,24,20,41,127,-34,4, -46,48,-11,33,-15,3,25,7, 12,-6,18,15,27,4,10,-3, 
  /* [12][1][][] */ 54,-9,27,-2,-20,-18,24,18, -70,15,-40,-2,0,15,2,-6, -12,-25,8,9,17,-27,-8,12, 
  /* [12][2][][] */ 32,2,29,-2,72,-28,14,1, 3,37,-7,-2,1,-12,38,-8, 14,-6,-11,-34,34,21,-7,-23, 
  /* [13][0][][] */ -52,-6,-55,-60,-22,-48,100,-79, -106,15,6,-24,-127,-20,2,-61, 26,-41,-17,-14,-46,-13,-30,-31, 
  /* [13][1][][] */ -51,-28,-50,-58,-74,-3,14,35, 13,32,-10,-51,-90,45,9,-2, 26,-5,13,-13,-45,14,-29,35, 
  /* [13][2][][] */ -9,42,-50,-72,-93,28,7,-49, 53,21,-6,-11,-52,-28,-13,19, 0,-47,-53,23,-60,-5,-58,-4, 
  /* [14][0][][] */ -10,45,5,-89,-111,-29,-54,9, -30,-40,-6,-46,-73,9,14,52, 13,-18,11,-60,-56,-5,9,22, 
  /* [14][1][][] */ 5,35,14,-60,-76,8,37,16, 16,58,28,-95,-107,-28,48,47, 50,-35,32,-89,-94,-87,-70,1, 
  /* [14][2][][] */ 1,-4,-13,-20,-127,14,35,59, -26,24,2,29,-65,4,-32,62, -50,22,25,-28,-54,24,-2,-20, 
  /* [15][0][][] */ -44,-39,15,-59,-30,-28,-22,38, -48,10,10,-46,-74,32,69,24, -3,-12,8,-48,-18,-110,-19,33, 
  /* [15][1][][] */ -67,-5,24,-107,-117,-90,-3,30, -28,54,-3,-41,-71,9,-31,-32, 17,7,13,-7,1,-79,5,46, 
  /* [15][2][][] */ -40,0,37,-98,-116,-81,-127,25, -48,16,-32,-7,-51,8,30,18, -17,9,10,47,1,-45,0,47, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0055355816148221493, 0.0039246892556548119, 0.0062033743597567081, 0.0053183543495833874, 0.0056959539651870728, 0.0056743421591818333, 0.004907331895083189, 0.0060356473550200462, 0.0065283030271530151, 0.0055018826387822628, 0.0061031538061797619, 0.006004891823977232, 0.0059897499158978462, 0.0057080877013504505, 0.005173499695956707, 0.0058791805058717728, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.045607279986143112, } };
const TfArray<1, int> quant9_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,49,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.011630554683506489, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.011630554683506489, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.012505275197327137, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.012505275197327137, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.012505275197327137, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.048495542258024216, } };
const TfArray<1, int> quant15_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,5 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,2 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,3 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,4 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension9, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
