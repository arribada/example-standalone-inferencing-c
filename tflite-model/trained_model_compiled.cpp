/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 12.02.2021 11:32:52

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 10624;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1287 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[8] = { -1.6149817705154419, -2.1575086116790771, 0.56155246496200562, -3.3817920684814453, -1.4641938209533691, -1.9603198766708374, -3.0868794918060303, 0.0086239892989397049, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[16] = { 0.36207184195518494, 0.2560497522354126, -1.9812788963317871, -2.8815951347351074, 0.11220672726631165, -0.068204931914806366, -0.52344471216201782, 0.1291058212518692, 0.53460490703582764, 0.58340054750442505, 0.096682757139205933, 0.47556042671203613, -0.030690118670463562, 0.14282825589179993, -2.6626498699188232, -1.9545869827270508, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(8) float tensor_data4[3] = { 2.6858692169189453, -2.3294069766998291, -0.29581457376480103, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const ALIGN(8) float tensor_data5[3*400] = { 
  -0.009951653890311718, -0.3948395848274231, -0.10588327795267105, -0.14612483978271484, 0.065358974039554596, 0.054034925997257233, -0.15241865813732147, 0.7101510763168335, 0.24449215829372406, 0.17035834491252899, 0.15815097093582153, 0.75847381353378296, 0.14232061803340912, 0.29774656891822815, 0.067036472260951996, 0.40061330795288086, -0.84580844640731812, -0.51552927494049072, -0.081068411469459534, 0.12919789552688599, -0.51736891269683838, 0.16444115340709686, 0.073748603463172913, 0.010361868888139725, -0.16427268087863922, -0.19272890686988831, -0.28142914175987244, -0.072824448347091675, -0.16641868650913239, -0.098212592303752899, -0.1132853627204895, 0.033699680119752884, -0.83397328853607178, -0.32479029893875122, 0.11854051053524017, 0.18060752749443054, -0.3350246250629425, 0.27380403876304626, -0.24062809348106384, 0.034599490463733673, -0.097366549074649811, -0.14092519879341125, -0.27341020107269287, -0.45534369349479675, 0.2422480583190918, -0.26317697763442993, -0.061357218772172928, 0.2757868766784668, -0.95781910419464111, -0.46763566136360168, -0.057038702070713043, 0.24198581278324127, -0.29994240403175354, 0.42685899138450623, 0.22880077362060547, 0.21991632878780365, -0.017957855015993118, -0.085904777050018311, -0.39561724662780762, -0.48648586869239807, -0.11953652650117874, 0.0077272728085517883, -0.047778047621250153, 0.1193423867225647, -1.3516762256622314, -0.5469704270362854, -0.5138278603553772, 0.098083242774009705, -0.28601336479187012, 0.55979764461517334, 0.0091885244473814964, 0.48133370280265808, -0.10057312995195389, -0.1032976508140564, -0.19531771540641785, -0.57893681526184082, -0.20491582155227661, -0.55192548036575317, -0.14979283511638641, 0.24958387017250061, -0.6831507682800293, -0.38861805200576782, 0.30247846245765686, -0.16109134256839752, -0.31764498353004456, 0.044942568987607956, 0.002212997991591692, 0.29189455509185791, 0.055341105908155441, -0.10811479389667511, -0.23503875732421875, -0.21760767698287964, -0.051946718245744705, -0.45197573304176331, 0.30701190233230591, 0.46240139007568359, -0.84541189670562744, -0.18296840786933899, 0.34765365719795227, 0.22175745666027069, -0.18233288824558258, 0.13354021310806274, 0.014966884627938271, 0.22743251919746399, 0.081560924649238586, -0.060352373868227005, -0.18174904584884644, -0.13604125380516052, -0.088165760040283203, -0.55699390172958374, 0.041678320616483688, 0.45682772994041443, -1.0010136365890503, -0.41486391425132751, -0.087531067430973053, 0.32057598233222961, -0.046237178146839142, 0.19159945845603943, 0.0547771155834198, 0.42327815294265747, 0.085373558104038239, -0.062968283891677856, -0.33079409599304199, -0.28464692831039429, 0.033397160470485687, -0.55683660507202148, -0.17369659245014191, 0.13790665566921234, -0.90031945705413818, -0.58120286464691162, 0.064353734254837036, 0.21023532748222351, -0.29523184895515442, 0.19937694072723389, -0.12678490579128265, 0.29292246699333191, 0.086477003991603851, -0.13262298703193665, -0.11688826233148575, -0.30209854245185852, -0.015906296670436859, -0.065005242824554443, 0.049590602517127991, 0.38656061887741089, -1.0745117664337158, -0.55594968795776367, 0.36558562517166138, 0.24092477560043335, -0.27311232686042786, 0.127643883228302, -0.048318430781364441, 0.27642583847045898, 0.065516486763954163, 0.029563480988144875, -0.34072238206863403, -0.20693385601043701, -0.12258537113666534, -0.22312842309474945, 0.12698449194431305, 0.21833616495132446, -0.86606603860855103, -0.36632427573204041, 0.40393355488777161, 0.43652623891830444, -0.33123695850372314, 0.13542889058589935, 0.089789651334285736, 0.16664329171180725, -0.10531340539455414, 0.011913728900253773, -0.065047048032283783, -0.5137743353843689, 0.12600548565387726, -0.33099871873855591, 0.3370232880115509, 0.09550340473651886, -0.71789455413818359, -0.56647491455078125, -0.12126161903142929, 0.098741404712200165, -0.06586214154958725, 0.27840444445610046, -0.053654581308364868, 0.0041188346222043037, -0.1655881255865097, -0.055070053786039352, -0.32607141137123108, -0.26807400584220886, -0.069427497684955597, -0.26783761382102966, -0.0070815873332321644, 0.254212886095047, -0.44895842671394348, -0.41516166925430298, 0.10638904571533203, 0.0097846705466508865, -0.38452827930450439, 0.064884290099143982, 0.035945374518632889, 0.27374619245529175, -0.015310665592551231, -0.089095361530780792, -0.2865678071975708, -0.0039844275452196598, -0.11952429264783859, -0.51584726572036743, 0.31057983636856079, 0.25200271606445312, -0.31007763743400574, -0.32774627208709717, 0.29383152723312378, 0.013658071868121624, -0.2849079966545105, 0.063561730086803436, 0.18192772567272186, 0.25979152321815491, -0.28741306066513062, -0.0078082596883177757, -0.27594679594039917, -0.32311215996742249, -0.29814207553863525, -0.062803514301776886, 0.46558484435081482, -0.06839345395565033, -0.60214191675186157, -0.71463769674301147, -0.01537103857845068, 0.068748600780963898, -0.029862171038985252, 0.043490909039974213, -0.17016522586345673, 0.068037107586860657, -0.27917316555976868, -0.19581212103366852, -0.36255115270614624, -0.15864261984825134, -0.12800246477127075, -0.18400292098522186, 0.11861959099769592, 0.11211811751127243, -0.47174307703971863, -0.61307096481323242, -0.031245380640029907, 0.10602878779172897, 0.1059965044260025, 0.11565270274877548, -0.12148688733577728, 0.081775657832622528, -0.1801031082868576, -0.1324276477098465, -0.16930486261844635, -0.25928062200546265, -0.41956064105033875, -0.20997966825962067, 0.071363918483257294, 0.14607259631156921, -0.80423778295516968, -0.29585140943527222, 0.22272698581218719, -0.034398458898067474, -0.1329057514667511, 0.11718779802322388, 0.0598100945353508, 0.094784878194332123, -0.16433656215667725, -0.15452514588832855, -0.1241907924413681, -0.70700907707214355, 0.061411194503307343, -0.261344313621521, 0.090252719819545746, 0.11312653124332428, -0.52778255939483643, -0.57946807146072388, -0.021925896406173706, 0.11410827189683914, -0.11156041175127029, -0.11234154552221298, 0.036855347454547882, 0.25828191637992859, -0.27917048335075378, -0.11159268021583557, -0.19452543556690216, -0.61853373050689697, -0.41619956493377686, -0.47335928678512573, 0.094090722501277924, 0.075421273708343506, -1.012299656867981, -0.40881863236427307, 0.11434256285429001, 0.12487150728702545, -0.15445208549499512, -0.10274041444063187, -0.062308147549629211, 0.073705695569515228, -0.20712241530418396, -0.23303908109664917, -0.27350175380706787, -0.50315791368484497, -0.097421392798423767, -0.62039339542388916, 0.16911420226097107, 0.23196446895599365, -0.90044832229614258, -0.62021178007125854, -0.087585799396038055, 0.43887299299240112, -0.097175359725952148, 0.12193909287452698, 0.11826224625110626, 0.16204959154129028, -0.099496252834796906, -0.079732842743396759, -0.12030300498008728, -0.37911480665206909, -0.25668174028396606, -1.0103129148483276, 0.28087770938873291, 0.13281692564487457, -0.1729310005903244, -0.17775194346904755, 0.065827600657939911, -0.072012491524219513, -0.22229847311973572, 0.098104380071163177, 0.038841456174850464, -0.28215867280960083, -0.24995680153369904, -0.14851817488670349, 0.32280021905899048, -0.69463050365447998, -0.057616781443357468, -0.25941586494445801, 0.09209991991519928, 0.10536300390958786, -0.56732898950576782, -0.68843835592269897, -0.0043759038671851158, 0.16189508140087128, -0.043494336307048798, 0.070759005844593048, 0.13830281794071198, 0.12789075076580048, -0.29584833979606628, -0.026054568588733673, -0.053572952747344971, -0.42611280083656311, -0.029248686507344246, -0.68615257740020752, 0.27591323852539062, 0.26533171534538269, -0.37294286489486694, 0.018626078963279724, 0.035824369639158249, -0.0083127105608582497, -0.11164291203022003, 0.3035748302936554, -0.054939825087785721, 0.025527523830533028, -0.34737291932106018, -0.23412209749221802, 0.20810021460056305, 0.39814811944961548, -0.30190184712409973, -0.2227732390165329, 0.053749620914459229, 0.21879354119300842, 0.050888147205114365, -0.43522787094116211, 0.3798224925994873, 0.12479618191719055, -0.14328239858150482, 0.028377607464790344, -0.040591869503259659, 0.27129790186882019, -0.40940564870834351, -0.20484271645545959, -0.022212719544768333, 0.2915937602519989, 0.075959160923957825, -0.3160613477230072, 0.096785731613636017, 0.17379191517829895, 0.53508478403091431, 0.37758499383926392, 0.15910777449607849, 0.13583654165267944, -0.083256185054779053, 0.15545734763145447, 0.30100986361503601, 0.045270111411809921, -0.18879115581512451, -0.21691416203975677, 0.050798267126083374, 0.25273105502128601, 0.071222543716430664, -0.34057483077049255, -0.15119084715843201, -0.13592422008514404, 
  0.46557071805000305, -0.3813786506652832, 0.079301334917545319, 0.13587111234664917, 0.22524620592594147, -0.26769372820854187, 0.019240306690335274, -0.58842962980270386, -1.5013526678085327, -0.1881604790687561, 0.10087714344263077, -1.171375036239624, 0.098010852932929993, -1.1501398086547852, -0.063745222985744476, -0.76546621322631836, 0.14471575617790222, 0.13431283831596375, -0.16897596418857574, 0.05292230099439621, 0.33491089940071106, -0.21961583197116852, -0.011419025249779224, -0.16758278012275696, 0.15333189070224762, -0.036158714443445206, 0.33766719698905945, -0.32993829250335693, 0.50266760587692261, -3.0458238124847412, 0.080701187252998352, -0.66062766313552856, 0.54204261302947998, 0.12054326385259628, -2.1981112957000732, -0.023494547232985497, 0.076852381229400635, -0.38206160068511963, 0.038906119763851166, 0.017143534496426582, 0.025632647797465324, -0.11723665148019791, 0.39264997839927673, 0.6415066123008728, 0.4500592052936554, -0.33658424019813538, 0.039339926093816757, -0.83897733688354492, 0.54376786947250366, 0.33378976583480835, -2.2457971572875977, 0.28858053684234619, 0.037846975028514862, -1.116674542427063, 0.00097713503055274487, -0.080520495772361755, -0.2187841385602951, -0.12947887182235718, 0.49161571264266968, 0.31872108578681946, 0.28754976391792297, -1.1772463321685791, 0.37643739581108093, -0.94896942377090454, 0.78109800815582275, 0.49016228318214417, -0.59672343730926514, 0.23591175675392151, 0.25714713335037231, -1.1589829921722412, 0.017807718366384506, -0.048307415097951889, -0.07999352365732193, -0.050368171185255051, 0.30759239196777344, 0.24919053912162781, 0.64274394512176514, -0.84387326240539551, 0.31055998802185059, -1.0483417510986328, 0.39164161682128906, 0.37728959321975708, -0.79285240173339844, 0.0031256999354809523, 0.10268978029489517, -0.98654037714004517, -0.02813018299639225, 0.12397138029336929, -0.0023109116591513157, -0.13631622493267059, 0.52613979578018188, 0.32567259669303894, 0.48360311985015869, -0.67453944683074951, 0.3473065197467804, -0.73345506191253662, 0.2548096776008606, 0.21223606169223785, -0.63132268190383911, -0.10317366570234299, 0.10570338368415833, -0.54230034351348877, 0.21993054449558258, -0.15069580078125, -0.06204725056886673, -0.17937345802783966, 0.26385650038719177, 0.077402405440807343, 0.69818025827407837, -0.17251777648925781, -0.063260518014431, -0.56624335050582886, 0.076544828712940216, 0.25297403335571289, -0.42330741882324219, -0.10559332370758057, 0.18157145380973816, -0.47700303792953491, 0.10040531307458878, -0.17117202281951904, 0.088668264448642731, -0.064738556742668152, 0.38065055012702942, -0.10472904890775681, 0.47818872332572937, -0.22180038690567017, 0.362184077501297, -0.56150221824645996, 0.29861661791801453, 0.37306997179985046, -0.51611757278442383, -0.083055078983306885, 0.20423898100852966, -0.46762534976005554, -0.068884745240211487, 0.021118920296430588, 0.26012146472930908, -0.24318358302116394, 0.41964030265808105, -0.036817096173763275, 0.52684611082077026, -0.23609669506549835, -0.013264411129057407, -0.88267797231674194, 0.26608887314796448, 0.27669695019721985, -0.84291315078735352, -0.056314136832952499, 0.0039759068749845028, -0.46224391460418701, 0.096977829933166504, 0.088743843138217926, 0.24983565509319305, -0.21593336760997772, 0.36328065395355225, -0.064897589385509491, 0.5355907678604126, 0.12338857352733612, 0.067787051200866699, -0.467182457447052, 0.18714721500873566, 0.36301589012145996, -0.76719236373901367, -0.36055570840835571, 0.070862464606761932, -0.41350319981575012, 0.082997649908065796, 0.065833389759063721, 0.25471267104148865, -0.11594261974096298, 0.33959153294563293, 0.11866141110658646, 0.67702430486679077, -0.1121620237827301, 0.42722707986831665, -0.79455548524856567, 0.27358362078666687, 0.21054606139659882, -0.31922653317451477, -0.096937701106071472, 0.078102491796016693, -0.49238631129264832, -0.030948024243116379, 0.11829538643360138, 0.16535264253616333, -0.022595874965190887, 0.24613447487354279, -0.23868325352668762, 0.51117372512817383, -0.17375464737415314, 0.1008928045630455, -0.96677505970001221, 0.21023374795913696, 0.22770573198795319, -0.81775027513504028, 0.068468891084194183, 0.10925411432981491, -0.27290469408035278, 0.0052730254828929901, 0.25571748614311218, 0.11611989140510559, -0.12493394315242767, 0.34487557411193848, -0.3659777045249939, 0.47444307804107666, -0.16969560086727142, 0.36222288012504578, -0.20083668828010559, 0.051612306386232376, 0.15865696966648102, -0.34009915590286255, 0.1788611114025116, -0.064814105629920959, -0.31789284944534302, 0.011373111978173256, 0.11636754125356674, 0.30829742550849915, -0.19245642423629761, 0.42380911111831665, -0.26708984375, 0.40648347139358521, -0.25688850879669189, 0.21894817054271698, 0.046948175877332687, 0.15544870495796204, 0.29331472516059875, -0.19604548811912537, 0.13057537376880646, -0.10921058803796768, -0.20714785158634186, -0.032843843102455139, 0.24616508185863495, 0.62609237432479858, -0.13105469942092896, 0.38198140263557434, -0.089287914335727692, 0.36613351106643677, -0.1836131364107132, -0.027751471847295761, 0.080087773501873016, 0.25844773650169373, 0.38299188017845154, -0.22563642263412476, -0.010846663266420364, -0.19574041664600372, -0.21505676209926605, -0.050627358257770538, -0.24070248007774353, 0.45928210020065308, -0.038952149450778961, 0.20990172028541565, -0.35724067687988281, 0.30010730028152466, 0.14598850905895233, 0.01827363483607769, -0.10043039172887802, 0.31641989946365356, 0.33396723866462708, -0.26711121201515198, 0.24844424426555634, -0.14026159048080444, -0.1185893788933754, -0.13520748913288116, 0.2344064861536026, 0.47264468669891357, -0.12968268990516663, 0.30397835373878479, 0.085692375898361206, 0.18708831071853638, -0.028681289404630661, -0.039621837437152863, -0.29679372906684875, 0.13578711450099945, 0.31736129522323608, -0.083760358393192291, 0.24075788259506226, -0.24769780039787292, -0.14993929862976074, 0.0036357666831463575, -0.014522387646138668, 0.71699416637420654, -0.13105928897857666, 0.31404691934585571, -0.13017967343330383, 0.4287739098072052, -0.053646281361579895, 0.18233998119831085, -0.23549419641494751, 0.18630950152873993, 0.33723703026771545, -0.28631442785263062, 0.35994872450828552, 0.0024690045975148678, -0.29565945267677307, 0.032465599477291107, 0.001073869876563549, 0.51723343133926392, -0.15447366237640381, 0.28056076169013977, -0.11424750089645386, 0.031217694282531738, -0.18816736340522766, 0.24364270269870758, -0.30381536483764648, 0.20157106220722198, 0.63212668895721436, -0.36097750067710876, 0.10607085376977921, -0.16672958433628082, -0.032696805894374847, -0.084587432444095612, 0.13820368051528931, 0.51311498880386353, 0.13850665092468262, 0.1419844776391983, -0.37365376949310303, 0.064531706273555756, 0.16057230532169342, -0.28825151920318604, -0.20723015069961548, 0.13149797916412354, 0.55177819728851318, -0.77704715728759766, 0.18121227622032166, -0.22219330072402954, -0.2574688196182251, -0.014666978269815445, 0.061599757522344589, 0.5965125560760498, -0.0029144457075744867, -0.32065665721893311, -0.046605955809354782, 0.15285533666610718, -0.036959044635295868, -0.066198535263538361, -0.48193180561065674, 0.10654515773057938, 0.76324176788330078, -0.27034449577331543, 0.19776083528995514, -0.11621629446744919, -0.31179153919219971, -0.083989329636096954, 0.1284479945898056, 0.43657329678535461, 0.018644643947482109, -0.072653003036975861, -0.22865279018878937, 0.33363246917724609, 0.10491955280303955, -0.039579559117555618, -0.19894629716873169, -0.10278009623289108, 0.42609605193138123, -0.43316003680229187, 0.11955960839986801, -0.0013616064097732306, -0.29646798968315125, 0.089179806411266327, -0.17522305250167847, 0.68415266275405884, -0.035036239773035049, 0.0054588271304965019, -0.54170137643814087, 0.060169056057929993, -0.51308619976043701, -0.05482865497469902, -0.3108651340007782, -0.44240206480026245, 0.60743898153305054, -1.1321319341659546, 0.055921394377946854, 0.0090085901319980621, -0.099293820559978485, -0.042465560138225555, -0.094016276299953461, 0.51922935247421265, -0.01047993078827858, 0.070011027157306671, 0.063715465366840363, 0.07862313836812973, 0.2532583475112915, 0.23302370309829712, -0.014568140730261803, -0.90967249870300293, -0.19868209958076477, -0.20966149866580963, 0.12484671175479889, 0.036275651305913925, -0.12253244966268539, -0.17569531500339508, -0.11983969807624817, 0.35643160343170166, 0.0061448421329259872, 0.028047306463122368, 0.22803589701652527, 0.046573400497436523, 0.11046221852302551, 0.06270783394575119, -1.8299112319946289, 
  -0.71594095230102539, 0.0008336708415299654, 0.039100464433431625, 0.048212043941020966, -0.0109126977622509, -0.096280716359615326, 0.048946522176265717, -0.23458713293075562, 0.36930835247039795, -0.055483464151620865, -0.28520876169204712, -0.28553092479705811, -0.026826588436961174, -0.23501892387866974, -0.1161770224571228, -0.14974907040596008, 0.28587615489959717, 0.5146903395652771, 0.20461505651473999, -0.17617222666740417, 0.08115687221288681, -0.048176325857639313, -0.12516233325004578, 0.10309664160013199, -0.028838608413934708, 0.19146858155727386, -0.29590126872062683, 0.25658637285232544, -0.28377273678779602, 0.64497411251068115, 0.00062974798493087292, 0.23960296809673309, -0.093469575047492981, 0.35306534171104431, 0.40080013871192932, -0.31022897362709045, 0.082822270691394806, -0.038064740598201752, 0.076567716896533966, 0.052638482302427292, -0.0080778570845723152, 0.1061309427022934, -0.24070639908313751, -0.17585815489292145, -0.80680537223815918, 0.29064708948135376, -0.043145723640918732, 0.13991339504718781, -0.16559457778930664, 0.017220411449670792, 0.46068844199180603, -0.52429550886154175, -0.060375314205884933, -0.039349712431430817, -0.14610671997070312, -0.2503211498260498, 0.12181073427200317, 0.21674008667469025, -0.37361004948616028, -0.068417988717556, -0.27144390344619751, 0.42570057511329651, -0.14203256368637085, 0.21561622619628906, 0.035544373095035553, 0.20605294406414032, 0.76892542839050293, -0.34198206663131714, -0.0044128592126071453, 0.067561887204647064, 0.0085694640874862671, -0.45646950602531433, 0.051118668168783188, 0.031329438090324402, -0.26281607151031494, 0.10583698004484177, -0.37936750054359436, 0.47063931822776794, -0.61805742979049683, 0.24929872155189514, -0.006437916774302721, 0.060716245323419571, -0.041526906192302704, -0.0086194854229688644, 0.1659698486328125, 0.36779218912124634, 0.094692349433898926, -0.1408945769071579, 0.054993577301502228, 0.15254917740821838, -0.34177786111831665, 0.053657025098800659, -0.30763739347457886, 0.59634339809417725, -0.30502310395240784, -0.15399308502674103, 0.10753615945577621, 0.16399233043193817, 0.12755744159221649, -0.15315480530261993, 0.054123349487781525, 0.1354699581861496, -0.13683353364467621, -0.092409223318099976, 0.017816837877035141, 0.22547204792499542, -0.35540920495986938, 0.075889579951763153, -0.33281046152114868, 0.57364124059677124, -0.43251243233680725, -0.046213366091251373, 0.14257746934890747, 0.17048557102680206, -0.065095037221908569, -0.10902246832847595, -0.042632505297660828, 0.14417384564876556, -0.081928513944149017, -0.11151230335235596, -0.29452827572822571, 0.25143307447433472, -0.31414136290550232, 0.34019124507904053, -0.52757340669631958, 0.38585391640663147, -0.4642530083656311, 0.014672358520328999, 0.053641270846128464, -0.026361934840679169, 0.087586864829063416, -0.12051462382078171, 0.01519706379622221, 0.25002214312553406, 0.065063647925853729, -0.081347450613975525, -0.17057108879089355, 0.27839484810829163, -0.18997782468795776, 0.16689242422580719, -0.21736469864845276, 0.09057394415140152, -0.44900608062744141, 0.046277191489934921, 0.046208076179027557, 0.078938283026218414, -0.0039313053712248802, -0.14470994472503662, 0.1748160719871521, 0.12108049541711807, 0.035283349454402924, -0.20355649292469025, -0.1133623868227005, 0.26357406377792358, -0.29243379831314087, 0.36500465869903564, -0.37079417705535889, 0.13230691850185394, -0.25102740526199341, 0.12703125178813934, 0.089680567383766174, 0.060975626111030579, 0.12417449802160263, -0.095917612314224243, -0.086748667061328888, 0.18855620920658112, 0.0031874170526862144, -0.1839158684015274, -0.10889209806919098, 0.14076755940914154, -0.22582165896892548, 0.31759938597679138, -0.53109323978424072, 0.19692905247211456, -0.11680863797664642, 0.20425285398960114, 0.056210096925497055, -0.039025962352752686, 0.14785696566104889, -0.056250981986522675, 0.073804982006549835, 0.21736961603164673, -0.035426974296569824, -0.17557649314403534, -0.11627665907144547, 0.082435153424739838, -0.16827267408370972, 0.27890273928642273, -0.39552241563796997, 0.31155228614807129, -0.32012039422988892, 0.1639900803565979, 0.082656413316726685, 0.059850957244634628, 0.23600882291793823, -0.12378334999084473, 0.022428464144468307, 0.12886892259120941, 0.10791047662496567, -0.3431415855884552, -0.11316941678524017, 0.19790346920490265, -0.091391734778881073, 0.29246410727500916, -0.30430668592453003, 0.19480389356613159, -0.91239655017852783, -0.0085704103112220764, 0.09008517861366272, 0.11455725133419037, -0.11953992396593094, -0.096782177686691284, 0.10122081637382507, 0.076480649411678314, 0.019588209688663483, -0.43949452042579651, -0.16399867832660675, 0.082593142986297607, -0.19495761394500732, 0.31901118159294128, -0.086238116025924683, 0.092282816767692566, -0.53895753622055054, -0.052740812301635742, 0.14304013550281525, -0.069097697734832764, 0.054029777646064758, -0.059093516319990158, 0.15623289346694946, 0.12400850653648376, 0.15282849967479706, 0.052118204534053802, -0.4990609884262085, 0.13886784017086029, -0.15583911538124084, 0.45048832893371582, -0.250833660364151, 0.17798292636871338, -0.46410682797431946, -0.093441061675548553, 0.0360068678855896, -0.024542542174458504, 0.18165509402751923, -0.020864848047494888, 0.15834379196166992, 0.19938522577285767, 0.036384191364049911, -0.10712828487157822, -0.39496338367462158, 0.18753212690353394, -0.096866287291049957, 0.37673628330230713, 0.034876957535743713, -0.039830237627029419, -0.22092801332473755, 0.061656877398490906, 0.11670094728469849, -0.10131406784057617, 0.048934105783700943, -0.11485547572374344, 0.0642976313829422, 0.15618038177490234, 0.16069750487804413, -0.20916692912578583, -0.20782899856567383, 0.20567417144775391, -0.044378578662872314, 0.50515544414520264, -0.15217526257038116, 0.048882756382226944, -0.21562905609607697, 0.1089036613702774, 0.13267369568347931, 0.014000591821968555, -0.17078441381454468, -0.32786276936531067, 0.36958339810371399, 0.018166797235608101, -0.043638613075017929, -0.29346844553947449, -0.42553335428237915, 0.10261443257331848, -0.10540036857128143, 0.32798558473587036, 0.075226567685604095, 0.28171119093894958, -0.79786163568496704, -0.015610607340931892, 0.3388945460319519, -0.1292521059513092, 0.15237352252006531, -0.476938396692276, 0.14381150901317596, 0.19646364450454712, 0.018290203064680099, -0.093050964176654816, -0.61631965637207031, 0.14465014636516571, -0.23130813241004944, 0.42020243406295776, -0.11267765611410141, 0.28460893034934998, -0.44967204332351685, 0.0095500871539115906, 0.21472272276878357, -0.16491235792636871, 0.20687828958034515, -0.24868951737880707, 0.32498237490653992, -0.14939786493778229, 0.040288683027029037, -0.17235629260540009, -0.51916790008544922, 0.18223986029624939, -0.075248271226882935, 0.26030704379081726, 0.084374785423278809, 0.26072007417678833, 0.21235355734825134, 0.024857202544808388, -0.11106547713279724, -0.086698964238166809, 0.10010116547346115, -0.10065785795450211, 0.12925362586975098, -0.08527267724275589, -0.0092059290036559105, -0.20324146747589111, -0.33911901712417603, 0.04192163422703743, 0.070558197796344757, 0.37287625670433044, -0.1805688738822937, 0.14262022078037262, -0.82925224304199219, 0.028512414544820786, 0.18965300917625427, -0.26454854011535645, -0.18849340081214905, -0.29611131548881531, 0.15582510828971863, 0.022119838744401932, 0.030300447717308998, -0.3243367075920105, -0.39074373245239258, 0.11494938284158707, 0.07024809718132019, 0.46613070368766785, -0.16713082790374756, 0.23160181939601898, -0.28855091333389282, 0.0081083057448267937, 0.23385992646217346, -0.36980980634689331, -0.00073029741179198027, -0.061762791126966476, 0.069342426955699921, -0.13853232562541962, 0.077910535037517548, -0.22500813007354736, -0.42582178115844727, 0.060660962015390396, -0.080420136451721191, 0.23644581437110901, -0.1302742063999176, 0.45585069060325623, -0.18606860935688019, -0.062582798302173615, 0.18263368308544159, 0.11213814467191696, -0.034351203590631485, -0.19176171720027924, 0.013752400875091553, -0.15810801088809967, -0.094991005957126617, -0.24818709492683411, -0.28851324319839478, 0.085809171199798584, 0.10565546154975891, -0.42329967021942139, -0.25465983152389526, 0.23590968549251556, -0.35505825281143188, 0.11447107791900635, -0.064313694834709167, -0.34269896149635315, 0.04781639575958252, 0.072621338069438934, -0.16460762917995453, -0.13836811482906342, -0.072246938943862915, -0.040973499417304993, -0.1412523090839386, 0.1885761171579361, 0.025682754814624786, -0.11070728302001953, -0.39287614822387695, 0.19563965499401093, 0.056063968688249588, 0.30629557371139526, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,400 } };
const ALIGN(8) float tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const ALIGN(8) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.36760115623474121,1.1215348243713379,0.4523264467716217,-0.075704261660575867,0.17313170433044434,0.18382343649864197,0.49098020792007446,-0.17426827549934387,0.23140314221382141,-0.0094454428181052208,0.13095034658908844,-0.12076935172080994,0.10240960121154785, 1.1374539136886597,-1.3998992443084717,0.52730560302734375,-0.21594174206256866,0.059018012136220932,0.014618242159485817,-0.011671815998852253,-0.067031443119049072,0.073220960795879364,-0.28309330344200134,0.33907583355903625,-0.1510823518037796,-0.22818194329738617, -3.8907136917114258,1.5194644927978516,-1.3028572797775269,0.14549888670444489,-0.21118243038654327,-0.14457656443119049,-0.1279846578836441,-0.080862246453762054,-0.092036202549934387,0.020733701065182686,0.068087078630924225,0.055432356894016266,0.29582476615905762, 
  /* [1][0][][] */ 1.9108601808547974,0.20470394194126129,1.1557402610778809,0.60735881328582764,-0.35038164258003235,-0.049286250025033951,-0.21185556054115295,0.08277498185634613,0.1981927901506424,-0.17095059156417847,0.20666944980621338,0.24422527849674225,0.025421971455216408, -1.3192862272262573,-0.074722692370414734,0.46593815088272095,0.096594378352165222,0.6477779746055603,-0.31043675541877747,-0.091726534068584442,-0.13962411880493164,0.17003406584262848,0.050634786486625671,0.30653819441795349,-0.092760957777500153,0.13165001571178436, -1.0120750665664673,-1.1481848955154419,0.95892989635467529,-0.2208327054977417,-0.21219746768474579,0.13986922800540924,-0.30713477730751038,0.046017270535230637,0.14141038060188293,-0.30408650636672974,0.22229744493961334,-0.53490352630615234,0.10677198320627213, 
  /* [2][0][][] */ -0.21262162923812866,-0.24449412524700165,-0.52388459444046021,-0.051591921597719193,0.014528738334774971,-0.061559442430734634,-0.079828463494777679,-0.057771246880292892,0.21053729951381683,-0.19582106173038483,0.11387551575899124,-0.10398174822330475,0.20524699985980988, -0.53116154670715332,-0.20802775025367737,-0.13785760104656219,-0.1639268696308136,0.17195871472358704,-0.031803730875253677,0.14652992784976959,0.0017788625555112958,-0.12698832154273987,0.11994896084070206,0.17406618595123291,-0.043924666941165924,-0.22507959604263306, -1.8873180150985718,-1.0964616537094116,0.20873294770717621,0.046126559376716614,0.1113002821803093,0.1212947815656662,-0.11646392196416855,-0.2841644287109375,0.25815662741661072,-0.19029754400253296,-0.052812658250331879,-0.18804052472114563,-0.022419935092329979, 
  /* [3][0][][] */ 0.79100000858306885,-0.11865778267383575,0.30759838223457336,-0.0080591021105647087,-0.31710666418075562,-0.060499601066112518,-0.041038703173398972,0.52502262592315674,-0.33806654810905457,0.054726477712392807,0.22729204595088959,0.026280762627720833,-0.094211168587207794, 0.31188473105430603,-0.32848373055458069,-0.038688056170940399,-0.40077847242355347,0.042244501411914825,-0.15280544757843018,-0.12175923585891724,0.40287518501281738,-0.022193759679794312,0.011710850521922112,-0.22667872905731201,0.1928381621837616,0.033465787768363953, 0.75581490993499756,0.53084337711334229,-0.71873998641967773,-0.13821244239807129,-0.10505156219005585,0.071265086531639099,-0.12865234911441803,0.41754549741744995,0.12948755919933319,-0.16609735786914825,-0.33957436680793762,0.029594212770462036,0.0021723697427660227, 
  /* [4][0][][] */ 2.5931925773620605,0.76705038547515869,-0.17094102501869202,0.39118626713752747,0.23100204765796661,0.17493061721324921,0.091201938688755035,-0.07739635556936264,0.091689243912696838,-0.23668354749679565,0.11058759689331055,-0.10618872940540314,0.087885752320289612, 1.0979810953140259,-0.37288710474967957,0.022646894678473473,-0.22222031652927399,-0.59424835443496704,-0.1470734030008316,-0.10230648517608643,0.11242558807134628,-0.03653205931186676,-0.0034517867024987936,0.23094573616981506,-0.17196479439735413,0.1901206374168396, -3.6586728096008301,-0.8448948860168457,0.19276361167430878,-0.075297683477401733,0.48754936456680298,-0.044915232807397842,0.023726668208837509,-0.29338982701301575,0.23198583722114563,0.081420376896858215,-0.21666257083415985,-0.16884914040565491,-0.076201476156711578, 
  /* [5][0][][] */ -1.9491816759109497,0.61449134349822998,-0.031417328864336014,0.31482008099555969,-0.18725715577602386,0.38667836785316467,0.027361167594790459,-0.20630893111228943,0.42647570371627808,-0.0012958347797393799,-0.098356634378433228,0.010176826268434525,-0.011912990361452103, -0.78795695304870605,-0.84969013929367065,0.20945778489112854,-0.23730973899364471,0.3684118390083313,0.18306273221969604,-0.081006906926631927,-0.12471961975097656,0.28002014756202698,-0.18912570178508759,0.14807327091693878,0.020215336233377457,-0.19178140163421631, 3.2558696269989014,-0.78242766857147217,-0.42348912358283997,-0.59631425142288208,0.32094651460647583,-0.20592185854911804,0.0086023695766925812,0.064805082976818085,-0.053674966096878052,-0.097488135099411011,0.39593973755836487,-0.07991066575050354,0.12848645448684692, 
  /* [6][0][][] */ -0.15452638268470764,0.81655454635620117,0.055072460323572159,-0.54665523767471313,0.050727367401123047,0.257386714220047,-0.11752276122570038,-0.2734997570514679,0.4403759241104126,-0.013129211030900478,0.18654675781726837,-0.12083500623703003,0.076681859791278839, -0.3500497043132782,0.43559858202934265,0.22922946512699127,-0.55322998762130737,-0.13440078496932983,-0.08841376006603241,-0.056652151048183441,0.1657305508852005,0.043179217725992203,-0.064118549227714539,0.036101479083299637,-0.0042084488086402416,0.048338405787944794, -0.20323847234249115,0.74613869190216064,0.031419470906257629,-0.69376033544540405,-0.17548440396785736,-0.16143250465393066,-0.59483319520950317,-0.54990088939666748,0.023358192294836044,-0.29086032509803772,0.33059394359588623,-0.31656372547149658,0.13639098405838013, 
  /* [7][0][][] */ -0.80275189876556396,-0.4761594831943512,0.5348973274230957,0.063284978270530701,0.093490622937679291,0.1181289330124855,0.34679883718490601,-0.1661665290594101,0.14327415823936462,0.06402113288640976,-0.401969313621521,0.067506924271583557,0.090966254472732544, 0.31930205225944519,-0.10097654908895493,0.071343272924423218,-0.049768071621656418,0.15882575511932373,0.17575079202651978,0.096184410154819489,0.0074152718298137188,-0.079283885657787323,-0.010936375707387924,0.13984853029251099,-0.1298823356628418,-0.059821251779794693, 0.20539772510528564,-0.64724445343017578,-0.38199907541275024,0.3324550986289978,0.5578923225402832,-0.039669711142778397,0.56964111328125,-0.023965699598193169,0.17730621993541718,0.30639094114303589,-0.29679498076438904,0.087773188948631287,-0.0002280204207636416, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(8) float tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const ALIGN(8) float tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -0.15624541044235229,-0.28198325634002686,-0.33312049508094788,0.12359330803155899,-0.12026096880435944,-0.018477786332368851,0.16363544762134552,-0.088777661323547363, -0.093244411051273346,-0.30879741907119751,-1.8794153928756714,0.11885582655668259,-0.23065997660160065,-0.25121217966079712,0.055768083781003952,-1.7508432865142822, -0.102164126932621,-0.12120424956083298,-0.34470108151435852,-0.050454370677471161,-0.22319860756397247,-0.6440311074256897,0.21504862606525421,-2.7178406715393066, 
  /* [1][0][][] */ -4.5744767189025879,-0.090207412838935852,-6.5464138984680176,-0.049914620816707611,-0.89797168970108032,-0.17069953680038452,0.29542297124862671,0.099723756313323975, -5.4874844551086426,-0.24676544964313507,-4.1464896202087402,0.1049342080950737,-0.33658182621002197,-0.61940217018127441,-0.1232813373208046,0.051574032753705978, -3.945584774017334,-0.29711377620697021,-0.67000281810760498,0.028500014916062355,-0.20585578680038452,-0.55148649215698242,0.051591392606496811,0.1770748496055603, 
  /* [2][0][][] */ 0.045373685657978058,0.175550177693367,0.043107159435749054,0.64838844537734985,0.25056740641593933,0.0032334150746464729,-0.10801193118095398,0.082570232450962067, -0.35613065958023071,-0.21182748675346375,-0.044566608965396881,-0.08229643851518631,0.0027946070767939091,-0.056839603930711746,-0.058999594300985336,-0.03613947331905365, -0.1355321854352951,-0.2771289050579071,-0.089896515011787415,-0.28783831000328064,-0.87823307514190674,-0.096450768411159515,0.25656205415725708,-0.012025934644043446, 
  /* [3][0][][] */ -0.085846610367298126,-0.062413312494754791,0.55167573690414429,-0.6598440408706665,-0.087021589279174805,0.00078710599336773157,0.079720623791217804,0.0024255500175058842, 0.030615391209721565,0.076085887849330902,-0.015105945058166981,-0.16314323246479034,-0.13354215025901794,-0.044537153095006943,-0.070748224854469299,-0.034117307513952255, -0.095034681260585785,0.1558074951171875,-0.036424499005079269,0.048983149230480194,-0.23030209541320801,0.08742852509021759,0.28254982829093933,-0.04160081222653389, 
  /* [4][0][][] */ -0.3568778932094574,-0.29598456621170044,0.076285339891910553,-2.1325292587280273,-0.42136028409004211,-0.021381080150604248,-3.3144328594207764,0.10619332641363144, -0.22785617411136627,-1.9154168367385864,0.19845832884311676,-1.7580885887145996,-0.24929980933666229,-0.099728785455226898,-3.4284200668334961,0.045058906078338623, -0.19351935386657715,-1.0286636352539062,0.06529313325881958,-2.1484823226928711,-0.37672749161720276,-0.21387675404548645,-0.12575501203536987,0.021649183705449104, 
  /* [5][0][][] */ -2.6721558570861816,0.088689766824245453,-0.24986882507801056,0.21717604994773865,0.11694120615720749,0.17254351079463959,-0.26445642113685608,-0.025862257927656174, -2.6293914318084717,0.16092121601104736,-0.59622311592102051,-0.12942086160182953,-0.091630809009075165,0.058823604136705399,-0.1036803275346756,-0.045558489859104156, -1.9572372436523438,0.067722558975219727,-1.2181583642959595,0.17433205246925354,-0.15730743110179901,-0.038359027355909348,-0.019819878041744232,-0.1887078583240509, 
  /* [6][0][][] */ 0.038462728261947632,-0.17658865451812744,-0.19618780910968781,-0.16767537593841553,-0.30180710554122925,-0.20030651986598969,-0.51869767904281616,-0.10081331431865692, -0.27057898044586182,-0.44108998775482178,-0.24230387806892395,-0.62473762035369873,-0.045752149075269699,-0.03185185045003891,-0.31406611204147339,-0.46264654397964478, -0.4798521101474762,-0.082633800804615021,-0.37394851446151733,-0.35925352573394775,-0.12768451869487762,-0.48529177904129028,-0.16926091909408569,-0.41672030091285706, 
  /* [7][0][][] */ -0.1972137987613678,-0.44776546955108643,-0.15353330969810486,-0.28629335761070251,-0.20344963669776917,0.01218386460095644,-0.084346279501914978,0.066196881234645844, -1.6511588096618652,-0.19163069128990173,-0.90985149145126343,-0.020550252869725227,0.039414525032043457,0.18589386343955994,0.040881264954805374,0.050546079874038696, -0.49802714586257935,-0.1707446426153183,-0.35188254714012146,-0.055559709668159485,0.25547432899475098,-0.83525347709655762,-0.22700291872024536,-0.11344502121210098, 
  /* [8][0][][] */ -1.1957752704620361,-0.026829207316040993,-0.18629810214042664,-0.42021551728248596,-0.87283581495285034,-0.10558341443538666,-3.5339884757995605,0.18705184757709503, -3.3181760311126709,-1.0302001237869263,-0.20713013410568237,-0.3358517587184906,-0.28953069448471069,-0.10417318344116211,-0.48167839646339417,-0.022529061883687973, -1.5230444669723511,-2.991865873336792,-0.22807300090789795,-0.2904093861579895,-0.19766980409622192,-0.19236233830451965,-1.2852040529251099,0.11585693806409836, 
  /* [9][0][][] */ -0.054011687636375427,-0.41818618774414062,0.00016085035167634487,-3.1344280242919922,-2.0702695846557617,-1.8504022359848022,-1.0712435245513916,-0.11945163458585739, 0.012374067679047585,-0.27911978960037231,-0.011057418771088123,-4.6362137794494629,-0.42920270562171936,-0.88504934310913086,-1.6617631912231445,-0.043938137590885162, -0.09739995002746582,-0.14405582845211029,0.27244332432746887,-8.1153125762939453,-0.60540807247161865,-0.6306958794593811,-2.1777529716491699,-0.030258294194936752, 
  /* [10][0][][] */ -0.18989360332489014,-0.52058964967727661,0.37832623720169067,-0.83197629451751709,-0.13099421560764313,-0.21057622134685516,-0.27382379770278931,-0.053578086197376251, -0.5777353048324585,-0.1135711595416069,-0.33421272039413452,-0.32808640599250793,-0.3246481716632843,-0.2192116379737854,0.094006702303886414,-0.35258862376213074, -0.74136835336685181,0.01359590794891119,-2.7789304256439209,-0.067660704255104065,-0.11374685168266296,-0.11078114807605743,0.161017045378685,-1.0866515636444092, 
  /* [11][0][][] */ -0.27090162038803101,0.2323642373085022,-2.8326396942138672,-0.21164983510971069,-0.39440822601318359,-0.83215290307998657,-0.21044065058231354,-1.2531818151473999, -0.21444681286811829,0.073291048407554626,-0.95399034023284912,0.0084658125415444374,-0.29019284248352051,-0.4150996208190918,-0.2569427490234375,-2.2327439785003662, -0.053635198622941971,0.21076028048992157,-0.54275733232498169,0.0060073402710258961,-0.21091057360172272,-1.8528372049331665,-0.062068935483694077,-1.1696504354476929, 
  /* [12][0][][] */ -0.74141097068786621,-0.32517144083976746,-1.320049524307251,-0.019667146727442741,-0.82465100288391113,-0.49373462796211243,0.08599398285150528,-1.091141939163208, -0.22388747334480286,-0.14675749838352203,-0.33706647157669067,-0.17305313050746918,0.059019014239311218,-5.2641181945800781,-0.11617010831832886,-3.0909459590911865, -0.12131813913583755,0.24854306876659393,0.10195037722587585,-0.47264453768730164,0.23477999866008759,-1.3449642658233643,-0.75034511089324951,-0.038579374551773071, 
  /* [13][0][][] */ -0.37516182661056519,0.087877020239830017,-0.37937426567077637,0.33929902315139771,-0.76660043001174927,-0.13633809983730316,-0.40818285942077637,-0.077516578137874603, -1.1574462652206421,0.072168923914432526,-0.57080495357513428,-0.016740491613745689,-0.69675523042678833,-0.054244551807641983,-0.33156388998031616,-0.032238747924566269, -1.0387160778045654,-1.1950759887695312,-0.49999228119850159,0.21199208498001099,-0.66595607995986938,-0.13531084358692169,-0.2840939462184906,-0.096016660332679749, 
  /* [14][0][][] */ -0.27771544456481934,-0.29939323663711548,-0.036511700600385666,-0.0095466943457722664,0.16222277283668518,0.40499413013458252,-0.43423014879226685,0.12434188276529312, -0.25255963206291199,-0.077132657170295715,0.11310273408889771,-0.090402111411094666,0.072120726108551025,-0.13248740136623383,-0.68549394607543945,-0.049174118787050247, -0.10718970000743866,0.12170267850160599,0.10436496883630753,-0.16011907160282135,0.090245611965656281,-0.3424094021320343,-0.63035988807678223,0.020662263035774231, 
  /* [15][0][][] */ 0.038386043161153793,-0.30670309066772461,0.015546713955700397,-0.18819065392017365,-0.11835073679685593,0.029103001579642296,0.14609514176845551,-0.092819660902023315, 0.045255675911903381,-0.086147770285606384,-0.057680971920490265,-1.116032600402832,0.032710157334804535,-0.045238923281431198,0.095587700605392456,-0.076578795909881592, 0.55615139007568359,-0.34503629803657532,-0.014786290936172009,-4.8750162124633789,-0.049398213624954224,-0.30817165970802307,0.0067025469616055489,-0.098375894129276276, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 99, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 99, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 50, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,99,13 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,99,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,99,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,99,8 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,99,1,8 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,50,16 } };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,50,16 } };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,50,16 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,50,1,16 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,25,1,16 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,400 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension0, 5148, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4800, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1248, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 5148, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension17, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension19, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension21, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension23, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension25, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension27, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension29, 12, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
